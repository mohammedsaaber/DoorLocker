
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002126  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00002126  000021ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000ce  008000ce  00002228  2**0
                  ALLOC
  3 .stab         00001cc8  00000000  00000000  00002228  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bbf  00000000  00000000  00003ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004bef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000069a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007893  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008640  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000087a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000091fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3d       	cpi	r26, 0xD4	; 212
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 91 10 	jmp	0x2122	; 0x2122 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ec       	ldi	r26, 0xC5	; 197
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5a 10 	jmp	0x20b4	; 0x20b4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 ec       	ldi	r24, 0xC5	; 197
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 76 10 	jmp	0x20ec	; 0x20ec <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 86 10 	jmp	0x210c	; 0x210c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 Password_Checking_Flag = RIGHT_PASSWORD;

/********************************************************************************/

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	LCD_init();
     b4e:	0e 94 7e 09 	call	0x12fc	; 0x12fc <LCD_init>
	UART_init(9600);
     b52:	80 e8       	ldi	r24, 0x80	; 128
     b54:	95 e2       	ldi	r25, 0x25	; 37
     b56:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <UART_init>
	while (UART_recieveByte() != RECIEVER_IS_READY);
     b5a:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <UART_recieveByte>
     b5e:	8a 30       	cpi	r24, 0x0A	; 10
     b60:	e1 f7       	brne	.-8      	; 0xb5a <main+0x14>
	InsertPassword();
     b62:	0e 94 b4 05 	call	0xb68	; 0xb68 <InsertPassword>
     b66:	ff cf       	rjmp	.-2      	; 0xb66 <main+0x20>

00000b68 <InsertPassword>:

	}
}

void InsertPassword(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	e8 97       	sbiw	r28, 0x38	; 56
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61

	Counter = 0;
     b7c:	10 92 cf 00 	sts	0x00CF, r1
	Password_Checking_Flag = RIGHT_PASSWORD;
     b80:	10 92 d0 00 	sts	0x00D0, r1
	LCD_clearScreen();
     b84:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_clearScreen>
	LCD_displayString("Enter Pass:");
     b88:	80 e6       	ldi	r24, 0x60	; 96
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_displayString>
	LCD_goToRowColumn(2,0);
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_goToRowColumn>
     b98:	82 c0       	rjmp	.+260    	; 0xc9e <InsertPassword+0x136>

	while (Counter != MAX_PASSWORD)
	{
		key = KeyPad_getPressedKey();
     b9a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <KeyPad_getPressedKey>
     b9e:	80 93 ce 00 	sts	0x00CE, r24
		LCD_displayCharacter('*');
     ba2:	8a e2       	ldi	r24, 0x2A	; 42
     ba4:	0e 94 99 0b 	call	0x1732	; 0x1732 <LCD_displayCharacter>
		UART_sendByte(key);
     ba8:	80 91 ce 00 	lds	r24, 0x00CE
     bac:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <UART_sendByte>
		Counter++;
     bb0:	80 91 cf 00 	lds	r24, 0x00CF
     bb4:	8f 5f       	subi	r24, 0xFF	; 255
     bb6:	80 93 cf 00 	sts	0x00CF, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	aa e7       	ldi	r26, 0x7A	; 122
     bc0:	b3 e4       	ldi	r27, 0x43	; 67
     bc2:	8d ab       	std	Y+53, r24	; 0x35
     bc4:	9e ab       	std	Y+54, r25	; 0x36
     bc6:	af ab       	std	Y+55, r26	; 0x37
     bc8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bca:	6d a9       	ldd	r22, Y+53	; 0x35
     bcc:	7e a9       	ldd	r23, Y+54	; 0x36
     bce:	8f a9       	ldd	r24, Y+55	; 0x37
     bd0:	98 ad       	ldd	r25, Y+56	; 0x38
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	4a e7       	ldi	r20, 0x7A	; 122
     bd8:	53 e4       	ldi	r21, 0x43	; 67
     bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	89 ab       	std	Y+49, r24	; 0x31
     be4:	9a ab       	std	Y+50, r25	; 0x32
     be6:	ab ab       	std	Y+51, r26	; 0x33
     be8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     bea:	69 a9       	ldd	r22, Y+49	; 0x31
     bec:	7a a9       	ldd	r23, Y+50	; 0x32
     bee:	8b a9       	ldd	r24, Y+51	; 0x33
     bf0:	9c a9       	ldd	r25, Y+52	; 0x34
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	40 e8       	ldi	r20, 0x80	; 128
     bf8:	5f e3       	ldi	r21, 0x3F	; 63
     bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bfe:	88 23       	and	r24, r24
     c00:	2c f4       	brge	.+10     	; 0xc0c <InsertPassword+0xa4>
		__ticks = 1;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	98 ab       	std	Y+48, r25	; 0x30
     c08:	8f a7       	std	Y+47, r24	; 0x2f
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <InsertPassword+0x122>
	else if (__tmp > 65535)
     c0c:	69 a9       	ldd	r22, Y+49	; 0x31
     c0e:	7a a9       	ldd	r23, Y+50	; 0x32
     c10:	8b a9       	ldd	r24, Y+51	; 0x33
     c12:	9c a9       	ldd	r25, Y+52	; 0x34
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	3f ef       	ldi	r19, 0xFF	; 255
     c18:	4f e7       	ldi	r20, 0x7F	; 127
     c1a:	57 e4       	ldi	r21, 0x47	; 71
     c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c20:	18 16       	cp	r1, r24
     c22:	4c f5       	brge	.+82     	; 0xc76 <InsertPassword+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c24:	6d a9       	ldd	r22, Y+53	; 0x35
     c26:	7e a9       	ldd	r23, Y+54	; 0x36
     c28:	8f a9       	ldd	r24, Y+55	; 0x37
     c2a:	98 ad       	ldd	r25, Y+56	; 0x38
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 e2       	ldi	r20, 0x20	; 32
     c32:	51 e4       	ldi	r21, 0x41	; 65
     c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	bc 01       	movw	r22, r24
     c3e:	cd 01       	movw	r24, r26
     c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	98 ab       	std	Y+48, r25	; 0x30
     c4a:	8f a7       	std	Y+47, r24	; 0x2f
     c4c:	0f c0       	rjmp	.+30     	; 0xc6c <InsertPassword+0x104>
     c4e:	89 e1       	ldi	r24, 0x19	; 25
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	9e a7       	std	Y+46, r25	; 0x2e
     c54:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c56:	8d a5       	ldd	r24, Y+45	; 0x2d
     c58:	9e a5       	ldd	r25, Y+46	; 0x2e
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <InsertPassword+0xf2>
     c5e:	9e a7       	std	Y+46, r25	; 0x2e
     c60:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c62:	8f a5       	ldd	r24, Y+47	; 0x2f
     c64:	98 a9       	ldd	r25, Y+48	; 0x30
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	98 ab       	std	Y+48, r25	; 0x30
     c6a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6c:	8f a5       	ldd	r24, Y+47	; 0x2f
     c6e:	98 a9       	ldd	r25, Y+48	; 0x30
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f7       	brne	.-38     	; 0xc4e <InsertPassword+0xe6>
     c74:	14 c0       	rjmp	.+40     	; 0xc9e <InsertPassword+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c76:	69 a9       	ldd	r22, Y+49	; 0x31
     c78:	7a a9       	ldd	r23, Y+50	; 0x32
     c7a:	8b a9       	ldd	r24, Y+51	; 0x33
     c7c:	9c a9       	ldd	r25, Y+52	; 0x34
     c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	98 ab       	std	Y+48, r25	; 0x30
     c88:	8f a7       	std	Y+47, r24	; 0x2f
     c8a:	8f a5       	ldd	r24, Y+47	; 0x2f
     c8c:	98 a9       	ldd	r25, Y+48	; 0x30
     c8e:	9c a7       	std	Y+44, r25	; 0x2c
     c90:	8b a7       	std	Y+43, r24	; 0x2b
     c92:	8b a5       	ldd	r24, Y+43	; 0x2b
     c94:	9c a5       	ldd	r25, Y+44	; 0x2c
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <InsertPassword+0x12e>
     c9a:	9c a7       	std	Y+44, r25	; 0x2c
     c9c:	8b a7       	std	Y+43, r24	; 0x2b
	Password_Checking_Flag = RIGHT_PASSWORD;
	LCD_clearScreen();
	LCD_displayString("Enter Pass:");
	LCD_goToRowColumn(2,0);

	while (Counter != MAX_PASSWORD)
     c9e:	80 91 cf 00 	lds	r24, 0x00CF
     ca2:	88 30       	cpi	r24, 0x08	; 8
     ca4:	09 f0       	breq	.+2      	; 0xca8 <InsertPassword+0x140>
     ca6:	79 cf       	rjmp	.-270    	; 0xb9a <InsertPassword+0x32>
		UART_sendByte(key);
		Counter++;
		_delay_ms(250);
	}

	Counter = 0;
     ca8:	10 92 cf 00 	sts	0x00CF, r1

	LCD_clearScreen();
     cac:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_clearScreen>
	LCD_displayString("Re-enter Pass:");
     cb0:	8c e6       	ldi	r24, 0x6C	; 108
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_displayString>
	LCD_goToRowColumn(2,0);
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_goToRowColumn>
     cc0:	82 c0       	rjmp	.+260    	; 0xdc6 <InsertPassword+0x25e>

	while (Counter != MAX_PASSWORD)
	{
		key = KeyPad_getPressedKey();
     cc2:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <KeyPad_getPressedKey>
     cc6:	80 93 ce 00 	sts	0x00CE, r24
		LCD_displayCharacter('*');
     cca:	8a e2       	ldi	r24, 0x2A	; 42
     ccc:	0e 94 99 0b 	call	0x1732	; 0x1732 <LCD_displayCharacter>
		UART_sendByte(key);
     cd0:	80 91 ce 00 	lds	r24, 0x00CE
     cd4:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <UART_sendByte>
		Counter++;
     cd8:	80 91 cf 00 	lds	r24, 0x00CF
     cdc:	8f 5f       	subi	r24, 0xFF	; 255
     cde:	80 93 cf 00 	sts	0x00CF, r24
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	aa e7       	ldi	r26, 0x7A	; 122
     ce8:	b3 e4       	ldi	r27, 0x43	; 67
     cea:	8f a3       	std	Y+39, r24	; 0x27
     cec:	98 a7       	std	Y+40, r25	; 0x28
     cee:	a9 a7       	std	Y+41, r26	; 0x29
     cf0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf2:	6f a1       	ldd	r22, Y+39	; 0x27
     cf4:	78 a5       	ldd	r23, Y+40	; 0x28
     cf6:	89 a5       	ldd	r24, Y+41	; 0x29
     cf8:	9a a5       	ldd	r25, Y+42	; 0x2a
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	4a e7       	ldi	r20, 0x7A	; 122
     d00:	53 e4       	ldi	r21, 0x43	; 67
     d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	8b a3       	std	Y+35, r24	; 0x23
     d0c:	9c a3       	std	Y+36, r25	; 0x24
     d0e:	ad a3       	std	Y+37, r26	; 0x25
     d10:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d12:	6b a1       	ldd	r22, Y+35	; 0x23
     d14:	7c a1       	ldd	r23, Y+36	; 0x24
     d16:	8d a1       	ldd	r24, Y+37	; 0x25
     d18:	9e a1       	ldd	r25, Y+38	; 0x26
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e8       	ldi	r20, 0x80	; 128
     d20:	5f e3       	ldi	r21, 0x3F	; 63
     d22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d26:	88 23       	and	r24, r24
     d28:	2c f4       	brge	.+10     	; 0xd34 <InsertPassword+0x1cc>
		__ticks = 1;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	9a a3       	std	Y+34, r25	; 0x22
     d30:	89 a3       	std	Y+33, r24	; 0x21
     d32:	3f c0       	rjmp	.+126    	; 0xdb2 <InsertPassword+0x24a>
	else if (__tmp > 65535)
     d34:	6b a1       	ldd	r22, Y+35	; 0x23
     d36:	7c a1       	ldd	r23, Y+36	; 0x24
     d38:	8d a1       	ldd	r24, Y+37	; 0x25
     d3a:	9e a1       	ldd	r25, Y+38	; 0x26
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	3f ef       	ldi	r19, 0xFF	; 255
     d40:	4f e7       	ldi	r20, 0x7F	; 127
     d42:	57 e4       	ldi	r21, 0x47	; 71
     d44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d48:	18 16       	cp	r1, r24
     d4a:	4c f5       	brge	.+82     	; 0xd9e <InsertPassword+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4c:	6f a1       	ldd	r22, Y+39	; 0x27
     d4e:	78 a5       	ldd	r23, Y+40	; 0x28
     d50:	89 a5       	ldd	r24, Y+41	; 0x29
     d52:	9a a5       	ldd	r25, Y+42	; 0x2a
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e2       	ldi	r20, 0x20	; 32
     d5a:	51 e4       	ldi	r21, 0x41	; 65
     d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	bc 01       	movw	r22, r24
     d66:	cd 01       	movw	r24, r26
     d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	9a a3       	std	Y+34, r25	; 0x22
     d72:	89 a3       	std	Y+33, r24	; 0x21
     d74:	0f c0       	rjmp	.+30     	; 0xd94 <InsertPassword+0x22c>
     d76:	89 e1       	ldi	r24, 0x19	; 25
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	98 a3       	std	Y+32, r25	; 0x20
     d7c:	8f 8f       	std	Y+31, r24	; 0x1f
     d7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d80:	98 a1       	ldd	r25, Y+32	; 0x20
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <InsertPassword+0x21a>
     d86:	98 a3       	std	Y+32, r25	; 0x20
     d88:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8a:	89 a1       	ldd	r24, Y+33	; 0x21
     d8c:	9a a1       	ldd	r25, Y+34	; 0x22
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	9a a3       	std	Y+34, r25	; 0x22
     d92:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d94:	89 a1       	ldd	r24, Y+33	; 0x21
     d96:	9a a1       	ldd	r25, Y+34	; 0x22
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	69 f7       	brne	.-38     	; 0xd76 <InsertPassword+0x20e>
     d9c:	14 c0       	rjmp	.+40     	; 0xdc6 <InsertPassword+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9e:	6b a1       	ldd	r22, Y+35	; 0x23
     da0:	7c a1       	ldd	r23, Y+36	; 0x24
     da2:	8d a1       	ldd	r24, Y+37	; 0x25
     da4:	9e a1       	ldd	r25, Y+38	; 0x26
     da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	9a a3       	std	Y+34, r25	; 0x22
     db0:	89 a3       	std	Y+33, r24	; 0x21
     db2:	89 a1       	ldd	r24, Y+33	; 0x21
     db4:	9a a1       	ldd	r25, Y+34	; 0x22
     db6:	9e 8f       	std	Y+30, r25	; 0x1e
     db8:	8d 8f       	std	Y+29, r24	; 0x1d
     dba:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dbc:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <InsertPassword+0x256>
     dc2:	9e 8f       	std	Y+30, r25	; 0x1e
     dc4:	8d 8f       	std	Y+29, r24	; 0x1d

	LCD_clearScreen();
	LCD_displayString("Re-enter Pass:");
	LCD_goToRowColumn(2,0);

	while (Counter != MAX_PASSWORD)
     dc6:	80 91 cf 00 	lds	r24, 0x00CF
     dca:	88 30       	cpi	r24, 0x08	; 8
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <InsertPassword+0x268>
     dce:	79 cf       	rjmp	.-270    	; 0xcc2 <InsertPassword+0x15a>
		UART_sendByte(key);
		Counter++;
		_delay_ms(250);
	}

	UART_sendByte(RECIEVER_IS_READY);
     dd0:	8a e0       	ldi	r24, 0x0A	; 10
     dd2:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <UART_sendByte>
	Password_Checking_Flag = UART_recieveByte();
     dd6:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <UART_recieveByte>
     dda:	80 93 d0 00 	sts	0x00D0, r24
	LCD_clearScreen();
     dde:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_clearScreen>

	if (Password_Checking_Flag == WRONG_PASSWORD)
     de2:	80 91 d0 00 	lds	r24, 0x00D0
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	09 f0       	breq	.+2      	; 0xdec <InsertPassword+0x284>
     dea:	7d c0       	rjmp	.+250    	; 0xee6 <InsertPassword+0x37e>
	{
		LCD_goToRowColumn(0,4);
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	64 e0       	ldi	r22, 0x04	; 4
     df0:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_goToRowColumn>
		LCD_displayString("UN-MATCHED");
     df4:	8b e7       	ldi	r24, 0x7B	; 123
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_displayString>
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	aa ef       	ldi	r26, 0xFA	; 250
     e02:	b3 e4       	ldi	r27, 0x43	; 67
     e04:	89 8f       	std	Y+25, r24	; 0x19
     e06:	9a 8f       	std	Y+26, r25	; 0x1a
     e08:	ab 8f       	std	Y+27, r26	; 0x1b
     e0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e0c:	69 8d       	ldd	r22, Y+25	; 0x19
     e0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	4a e7       	ldi	r20, 0x7A	; 122
     e1a:	53 e4       	ldi	r21, 0x43	; 67
     e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	8d 8b       	std	Y+21, r24	; 0x15
     e26:	9e 8b       	std	Y+22, r25	; 0x16
     e28:	af 8b       	std	Y+23, r26	; 0x17
     e2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e2c:	6d 89       	ldd	r22, Y+21	; 0x15
     e2e:	7e 89       	ldd	r23, Y+22	; 0x16
     e30:	8f 89       	ldd	r24, Y+23	; 0x17
     e32:	98 8d       	ldd	r25, Y+24	; 0x18
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e8       	ldi	r20, 0x80	; 128
     e3a:	5f e3       	ldi	r21, 0x3F	; 63
     e3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e40:	88 23       	and	r24, r24
     e42:	2c f4       	brge	.+10     	; 0xe4e <InsertPassword+0x2e6>
		__ticks = 1;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	9c 8b       	std	Y+20, r25	; 0x14
     e4a:	8b 8b       	std	Y+19, r24	; 0x13
     e4c:	3f c0       	rjmp	.+126    	; 0xecc <InsertPassword+0x364>
	else if (__tmp > 65535)
     e4e:	6d 89       	ldd	r22, Y+21	; 0x15
     e50:	7e 89       	ldd	r23, Y+22	; 0x16
     e52:	8f 89       	ldd	r24, Y+23	; 0x17
     e54:	98 8d       	ldd	r25, Y+24	; 0x18
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	3f ef       	ldi	r19, 0xFF	; 255
     e5a:	4f e7       	ldi	r20, 0x7F	; 127
     e5c:	57 e4       	ldi	r21, 0x47	; 71
     e5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e62:	18 16       	cp	r1, r24
     e64:	4c f5       	brge	.+82     	; 0xeb8 <InsertPassword+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e66:	69 8d       	ldd	r22, Y+25	; 0x19
     e68:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e2       	ldi	r20, 0x20	; 32
     e74:	51 e4       	ldi	r21, 0x41	; 65
     e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	9c 8b       	std	Y+20, r25	; 0x14
     e8c:	8b 8b       	std	Y+19, r24	; 0x13
     e8e:	0f c0       	rjmp	.+30     	; 0xeae <InsertPassword+0x346>
     e90:	89 e1       	ldi	r24, 0x19	; 25
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	9a 8b       	std	Y+18, r25	; 0x12
     e96:	89 8b       	std	Y+17, r24	; 0x11
     e98:	89 89       	ldd	r24, Y+17	; 0x11
     e9a:	9a 89       	ldd	r25, Y+18	; 0x12
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <InsertPassword+0x334>
     ea0:	9a 8b       	std	Y+18, r25	; 0x12
     ea2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea4:	8b 89       	ldd	r24, Y+19	; 0x13
     ea6:	9c 89       	ldd	r25, Y+20	; 0x14
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	9c 8b       	std	Y+20, r25	; 0x14
     eac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eae:	8b 89       	ldd	r24, Y+19	; 0x13
     eb0:	9c 89       	ldd	r25, Y+20	; 0x14
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	69 f7       	brne	.-38     	; 0xe90 <InsertPassword+0x328>
     eb6:	14 c0       	rjmp	.+40     	; 0xee0 <InsertPassword+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb8:	6d 89       	ldd	r22, Y+21	; 0x15
     eba:	7e 89       	ldd	r23, Y+22	; 0x16
     ebc:	8f 89       	ldd	r24, Y+23	; 0x17
     ebe:	98 8d       	ldd	r25, Y+24	; 0x18
     ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	9c 8b       	std	Y+20, r25	; 0x14
     eca:	8b 8b       	std	Y+19, r24	; 0x13
     ecc:	8b 89       	ldd	r24, Y+19	; 0x13
     ece:	9c 89       	ldd	r25, Y+20	; 0x14
     ed0:	98 8b       	std	Y+16, r25	; 0x10
     ed2:	8f 87       	std	Y+15, r24	; 0x0f
     ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed6:	98 89       	ldd	r25, Y+16	; 0x10
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <InsertPassword+0x370>
     edc:	98 8b       	std	Y+16, r25	; 0x10
     ede:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		InsertPassword();
     ee0:	0e 94 b4 05 	call	0xb68	; 0xb68 <InsertPassword>
     ee4:	9d c0       	rjmp	.+314    	; 0x1020 <InsertPassword+0x4b8>
	}
	else
	{
		LCD_goToRowColumn(0,4);
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	64 e0       	ldi	r22, 0x04	; 4
     eea:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_goToRowColumn>
		LCD_displayString("MATCHED");
     eee:	86 e8       	ldi	r24, 0x86	; 134
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_displayString>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	aa ef       	ldi	r26, 0xFA	; 250
     efc:	b3 e4       	ldi	r27, 0x43	; 67
     efe:	8b 87       	std	Y+11, r24	; 0x0b
     f00:	9c 87       	std	Y+12, r25	; 0x0c
     f02:	ad 87       	std	Y+13, r26	; 0x0d
     f04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f06:	6b 85       	ldd	r22, Y+11	; 0x0b
     f08:	7c 85       	ldd	r23, Y+12	; 0x0c
     f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	4a e7       	ldi	r20, 0x7A	; 122
     f14:	53 e4       	ldi	r21, 0x43	; 67
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	8f 83       	std	Y+7, r24	; 0x07
     f20:	98 87       	std	Y+8, r25	; 0x08
     f22:	a9 87       	std	Y+9, r26	; 0x09
     f24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f26:	6f 81       	ldd	r22, Y+7	; 0x07
     f28:	78 85       	ldd	r23, Y+8	; 0x08
     f2a:	89 85       	ldd	r24, Y+9	; 0x09
     f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	5f e3       	ldi	r21, 0x3F	; 63
     f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f3a:	88 23       	and	r24, r24
     f3c:	2c f4       	brge	.+10     	; 0xf48 <InsertPassword+0x3e0>
		__ticks = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	9e 83       	std	Y+6, r25	; 0x06
     f44:	8d 83       	std	Y+5, r24	; 0x05
     f46:	3f c0       	rjmp	.+126    	; 0xfc6 <InsertPassword+0x45e>
	else if (__tmp > 65535)
     f48:	6f 81       	ldd	r22, Y+7	; 0x07
     f4a:	78 85       	ldd	r23, Y+8	; 0x08
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	3f ef       	ldi	r19, 0xFF	; 255
     f54:	4f e7       	ldi	r20, 0x7F	; 127
     f56:	57 e4       	ldi	r21, 0x47	; 71
     f58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f5c:	18 16       	cp	r1, r24
     f5e:	4c f5       	brge	.+82     	; 0xfb2 <InsertPassword+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f60:	6b 85       	ldd	r22, Y+11	; 0x0b
     f62:	7c 85       	ldd	r23, Y+12	; 0x0c
     f64:	8d 85       	ldd	r24, Y+13	; 0x0d
     f66:	9e 85       	ldd	r25, Y+14	; 0x0e
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e2       	ldi	r20, 0x20	; 32
     f6e:	51 e4       	ldi	r21, 0x41	; 65
     f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	bc 01       	movw	r22, r24
     f7a:	cd 01       	movw	r24, r26
     f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	9e 83       	std	Y+6, r25	; 0x06
     f86:	8d 83       	std	Y+5, r24	; 0x05
     f88:	0f c0       	rjmp	.+30     	; 0xfa8 <InsertPassword+0x440>
     f8a:	89 e1       	ldi	r24, 0x19	; 25
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	9c 83       	std	Y+4, r25	; 0x04
     f90:	8b 83       	std	Y+3, r24	; 0x03
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <InsertPassword+0x42e>
     f9a:	9c 83       	std	Y+4, r25	; 0x04
     f9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9e:	8d 81       	ldd	r24, Y+5	; 0x05
     fa0:	9e 81       	ldd	r25, Y+6	; 0x06
     fa2:	01 97       	sbiw	r24, 0x01	; 1
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	9e 81       	ldd	r25, Y+6	; 0x06
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	69 f7       	brne	.-38     	; 0xf8a <InsertPassword+0x422>
     fb0:	14 c0       	rjmp	.+40     	; 0xfda <InsertPassword+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb2:	6f 81       	ldd	r22, Y+7	; 0x07
     fb4:	78 85       	ldd	r23, Y+8	; 0x08
     fb6:	89 85       	ldd	r24, Y+9	; 0x09
     fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	9e 83       	std	Y+6, r25	; 0x06
     fc4:	8d 83       	std	Y+5, r24	; 0x05
     fc6:	8d 81       	ldd	r24, Y+5	; 0x05
     fc8:	9e 81       	ldd	r25, Y+6	; 0x06
     fca:	9a 83       	std	Y+2, r25	; 0x02
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <InsertPassword+0x46a>
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);

		LCD_clearScreen();
     fda:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_clearScreen>
		LCD_displayString("+ : Open Door");
     fde:	8e e8       	ldi	r24, 0x8E	; 142
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_displayString>
		LCD_goToRowColumn(2,0);
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_goToRowColumn>
		LCD_displayString("- : Change Pass");
     fee:	8c e9       	ldi	r24, 0x9C	; 156
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_displayString>

		do
		{
			key = KeyPad_getPressedKey();
     ff6:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <KeyPad_getPressedKey>
     ffa:	80 93 ce 00 	sts	0x00CE, r24

		}while ((key != '+') && (key != '-'));
     ffe:	80 91 ce 00 	lds	r24, 0x00CE
    1002:	8b 32       	cpi	r24, 0x2B	; 43
    1004:	21 f0       	breq	.+8      	; 0x100e <InsertPassword+0x4a6>
    1006:	80 91 ce 00 	lds	r24, 0x00CE
    100a:	8d 32       	cpi	r24, 0x2D	; 45
    100c:	a1 f7       	brne	.-24     	; 0xff6 <InsertPassword+0x48e>

		if (key == '+')
    100e:	80 91 ce 00 	lds	r24, 0x00CE
    1012:	8b 32       	cpi	r24, 0x2B	; 43
    1014:	19 f4       	brne	.+6      	; 0x101c <InsertPassword+0x4b4>
		{
			OpenDoor();
    1016:	0e 94 4a 09 	call	0x1294	; 0x1294 <OpenDoor>
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <InsertPassword+0x4b8>
		}
		else
		{
			ChangePassword();
    101c:	0e 94 57 09 	call	0x12ae	; 0x12ae <ChangePassword>
		}

	}

}
    1020:	e8 96       	adiw	r28, 0x38	; 56
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <PasswordChecking>:

void PasswordChecking(uint8 option)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	6d 97       	sbiw	r28, 0x1d	; 29
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	8d 8f       	std	Y+29, r24	; 0x1d
	Counter = 0;
    1048:	10 92 cf 00 	sts	0x00CF, r1
	LCD_clearScreen();
    104c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_clearScreen>
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a8 ec       	ldi	r26, 0xC8	; 200
    1056:	b2 e4       	ldi	r27, 0x42	; 66
    1058:	89 8f       	std	Y+25, r24	; 0x19
    105a:	9a 8f       	std	Y+26, r25	; 0x1a
    105c:	ab 8f       	std	Y+27, r26	; 0x1b
    105e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1060:	69 8d       	ldd	r22, Y+25	; 0x19
    1062:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1064:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1066:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	4a e7       	ldi	r20, 0x7A	; 122
    106e:	53 e4       	ldi	r21, 0x43	; 67
    1070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	8d 8b       	std	Y+21, r24	; 0x15
    107a:	9e 8b       	std	Y+22, r25	; 0x16
    107c:	af 8b       	std	Y+23, r26	; 0x17
    107e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1080:	6d 89       	ldd	r22, Y+21	; 0x15
    1082:	7e 89       	ldd	r23, Y+22	; 0x16
    1084:	8f 89       	ldd	r24, Y+23	; 0x17
    1086:	98 8d       	ldd	r25, Y+24	; 0x18
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e8       	ldi	r20, 0x80	; 128
    108e:	5f e3       	ldi	r21, 0x3F	; 63
    1090:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1094:	88 23       	and	r24, r24
    1096:	2c f4       	brge	.+10     	; 0x10a2 <PasswordChecking+0x70>
		__ticks = 1;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	9c 8b       	std	Y+20, r25	; 0x14
    109e:	8b 8b       	std	Y+19, r24	; 0x13
    10a0:	3f c0       	rjmp	.+126    	; 0x1120 <PasswordChecking+0xee>
	else if (__tmp > 65535)
    10a2:	6d 89       	ldd	r22, Y+21	; 0x15
    10a4:	7e 89       	ldd	r23, Y+22	; 0x16
    10a6:	8f 89       	ldd	r24, Y+23	; 0x17
    10a8:	98 8d       	ldd	r25, Y+24	; 0x18
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	3f ef       	ldi	r19, 0xFF	; 255
    10ae:	4f e7       	ldi	r20, 0x7F	; 127
    10b0:	57 e4       	ldi	r21, 0x47	; 71
    10b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b6:	18 16       	cp	r1, r24
    10b8:	4c f5       	brge	.+82     	; 0x110c <PasswordChecking+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ba:	69 8d       	ldd	r22, Y+25	; 0x19
    10bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e2       	ldi	r20, 0x20	; 32
    10c8:	51 e4       	ldi	r21, 0x41	; 65
    10ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	bc 01       	movw	r22, r24
    10d4:	cd 01       	movw	r24, r26
    10d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	9c 8b       	std	Y+20, r25	; 0x14
    10e0:	8b 8b       	std	Y+19, r24	; 0x13
    10e2:	0f c0       	rjmp	.+30     	; 0x1102 <PasswordChecking+0xd0>
    10e4:	89 e1       	ldi	r24, 0x19	; 25
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	9a 8b       	std	Y+18, r25	; 0x12
    10ea:	89 8b       	std	Y+17, r24	; 0x11
    10ec:	89 89       	ldd	r24, Y+17	; 0x11
    10ee:	9a 89       	ldd	r25, Y+18	; 0x12
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <PasswordChecking+0xbe>
    10f4:	9a 8b       	std	Y+18, r25	; 0x12
    10f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f8:	8b 89       	ldd	r24, Y+19	; 0x13
    10fa:	9c 89       	ldd	r25, Y+20	; 0x14
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	9c 8b       	std	Y+20, r25	; 0x14
    1100:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1102:	8b 89       	ldd	r24, Y+19	; 0x13
    1104:	9c 89       	ldd	r25, Y+20	; 0x14
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	69 f7       	brne	.-38     	; 0x10e4 <PasswordChecking+0xb2>
    110a:	14 c0       	rjmp	.+40     	; 0x1134 <PasswordChecking+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110c:	6d 89       	ldd	r22, Y+21	; 0x15
    110e:	7e 89       	ldd	r23, Y+22	; 0x16
    1110:	8f 89       	ldd	r24, Y+23	; 0x17
    1112:	98 8d       	ldd	r25, Y+24	; 0x18
    1114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	9c 8b       	std	Y+20, r25	; 0x14
    111e:	8b 8b       	std	Y+19, r24	; 0x13
    1120:	8b 89       	ldd	r24, Y+19	; 0x13
    1122:	9c 89       	ldd	r25, Y+20	; 0x14
    1124:	98 8b       	std	Y+16, r25	; 0x10
    1126:	8f 87       	std	Y+15, r24	; 0x0f
    1128:	8f 85       	ldd	r24, Y+15	; 0x0f
    112a:	98 89       	ldd	r25, Y+16	; 0x10
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <PasswordChecking+0xfa>
    1130:	98 8b       	std	Y+16, r25	; 0x10
    1132:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);

	if (option == '+')
    1134:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1136:	8b 32       	cpi	r24, 0x2B	; 43
    1138:	29 f4       	brne	.+10     	; 0x1144 <PasswordChecking+0x112>
	{
		LCD_displayString("Enter Pass:");
    113a:	80 e6       	ldi	r24, 0x60	; 96
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_displayString>
    1142:	04 c0       	rjmp	.+8      	; 0x114c <PasswordChecking+0x11a>
	}
	else
	{
		LCD_displayString("Enter Old Pass:");
    1144:	8c ea       	ldi	r24, 0xAC	; 172
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_displayString>
	}

	LCD_goToRowColumn(2,0);
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_goToRowColumn>
    1154:	82 c0       	rjmp	.+260    	; 0x125a <PasswordChecking+0x228>


	while (Counter != MAX_PASSWORD)
	{
		key = KeyPad_getPressedKey();
    1156:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <KeyPad_getPressedKey>
    115a:	80 93 ce 00 	sts	0x00CE, r24
		LCD_displayCharacter('*');
    115e:	8a e2       	ldi	r24, 0x2A	; 42
    1160:	0e 94 99 0b 	call	0x1732	; 0x1732 <LCD_displayCharacter>
		UART_sendByte(key);
    1164:	80 91 ce 00 	lds	r24, 0x00CE
    1168:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <UART_sendByte>
		Counter++;
    116c:	80 91 cf 00 	lds	r24, 0x00CF
    1170:	8f 5f       	subi	r24, 0xFF	; 255
    1172:	80 93 cf 00 	sts	0x00CF, r24
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	aa e7       	ldi	r26, 0x7A	; 122
    117c:	b3 e4       	ldi	r27, 0x43	; 67
    117e:	8b 87       	std	Y+11, r24	; 0x0b
    1180:	9c 87       	std	Y+12, r25	; 0x0c
    1182:	ad 87       	std	Y+13, r26	; 0x0d
    1184:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1186:	6b 85       	ldd	r22, Y+11	; 0x0b
    1188:	7c 85       	ldd	r23, Y+12	; 0x0c
    118a:	8d 85       	ldd	r24, Y+13	; 0x0d
    118c:	9e 85       	ldd	r25, Y+14	; 0x0e
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	4a e7       	ldi	r20, 0x7A	; 122
    1194:	53 e4       	ldi	r21, 0x43	; 67
    1196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	8f 83       	std	Y+7, r24	; 0x07
    11a0:	98 87       	std	Y+8, r25	; 0x08
    11a2:	a9 87       	std	Y+9, r26	; 0x09
    11a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11a6:	6f 81       	ldd	r22, Y+7	; 0x07
    11a8:	78 85       	ldd	r23, Y+8	; 0x08
    11aa:	89 85       	ldd	r24, Y+9	; 0x09
    11ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e8       	ldi	r20, 0x80	; 128
    11b4:	5f e3       	ldi	r21, 0x3F	; 63
    11b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ba:	88 23       	and	r24, r24
    11bc:	2c f4       	brge	.+10     	; 0x11c8 <PasswordChecking+0x196>
		__ticks = 1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	9e 83       	std	Y+6, r25	; 0x06
    11c4:	8d 83       	std	Y+5, r24	; 0x05
    11c6:	3f c0       	rjmp	.+126    	; 0x1246 <PasswordChecking+0x214>
	else if (__tmp > 65535)
    11c8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ca:	78 85       	ldd	r23, Y+8	; 0x08
    11cc:	89 85       	ldd	r24, Y+9	; 0x09
    11ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	3f ef       	ldi	r19, 0xFF	; 255
    11d4:	4f e7       	ldi	r20, 0x7F	; 127
    11d6:	57 e4       	ldi	r21, 0x47	; 71
    11d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11dc:	18 16       	cp	r1, r24
    11de:	4c f5       	brge	.+82     	; 0x1232 <PasswordChecking+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 e2       	ldi	r20, 0x20	; 32
    11ee:	51 e4       	ldi	r21, 0x41	; 65
    11f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	9e 83       	std	Y+6, r25	; 0x06
    1206:	8d 83       	std	Y+5, r24	; 0x05
    1208:	0f c0       	rjmp	.+30     	; 0x1228 <PasswordChecking+0x1f6>
    120a:	89 e1       	ldi	r24, 0x19	; 25
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	9c 83       	std	Y+4, r25	; 0x04
    1210:	8b 83       	std	Y+3, r24	; 0x03
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	9c 81       	ldd	r25, Y+4	; 0x04
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	f1 f7       	brne	.-4      	; 0x1216 <PasswordChecking+0x1e4>
    121a:	9c 83       	std	Y+4, r25	; 0x04
    121c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    121e:	8d 81       	ldd	r24, Y+5	; 0x05
    1220:	9e 81       	ldd	r25, Y+6	; 0x06
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	9e 83       	std	Y+6, r25	; 0x06
    1226:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	9e 81       	ldd	r25, Y+6	; 0x06
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	69 f7       	brne	.-38     	; 0x120a <PasswordChecking+0x1d8>
    1230:	14 c0       	rjmp	.+40     	; 0x125a <PasswordChecking+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1232:	6f 81       	ldd	r22, Y+7	; 0x07
    1234:	78 85       	ldd	r23, Y+8	; 0x08
    1236:	89 85       	ldd	r24, Y+9	; 0x09
    1238:	9a 85       	ldd	r25, Y+10	; 0x0a
    123a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	9e 83       	std	Y+6, r25	; 0x06
    1244:	8d 83       	std	Y+5, r24	; 0x05
    1246:	8d 81       	ldd	r24, Y+5	; 0x05
    1248:	9e 81       	ldd	r25, Y+6	; 0x06
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	9a 81       	ldd	r25, Y+2	; 0x02
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	f1 f7       	brne	.-4      	; 0x1252 <PasswordChecking+0x220>
    1256:	9a 83       	std	Y+2, r25	; 0x02
    1258:	89 83       	std	Y+1, r24	; 0x01
	}

	LCD_goToRowColumn(2,0);


	while (Counter != MAX_PASSWORD)
    125a:	80 91 cf 00 	lds	r24, 0x00CF
    125e:	88 30       	cpi	r24, 0x08	; 8
    1260:	09 f0       	breq	.+2      	; 0x1264 <PasswordChecking+0x232>
    1262:	79 cf       	rjmp	.-270    	; 0x1156 <PasswordChecking+0x124>
		UART_sendByte(key);
		Counter++;
		_delay_ms(250);
	}

	Password_Checking_Flag = UART_recieveByte();
    1264:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <UART_recieveByte>
    1268:	80 93 d0 00 	sts	0x00D0, r24

	if (Password_Checking_Flag == RIGHT_PASSWORD)
    126c:	80 91 d0 00 	lds	r24, 0x00D0
    1270:	88 23       	and	r24, r24
    1272:	21 f4       	brne	.+8      	; 0x127c <PasswordChecking+0x24a>
	{
		Options(option);
    1274:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1276:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Options>
    127a:	03 c0       	rjmp	.+6      	; 0x1282 <PasswordChecking+0x250>
	}
	else
	{
		PasswordChecking(option);
    127c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    127e:	0e 94 19 08 	call	0x1032	; 0x1032 <PasswordChecking>
	}
}
    1282:	6d 96       	adiw	r28, 0x1d	; 29
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <OpenDoor>:

void OpenDoor(void)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62

	UART_sendByte('+');
    129c:	8b e2       	ldi	r24, 0x2B	; 43
    129e:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <UART_sendByte>
	PasswordChecking('+');
    12a2:	8b e2       	ldi	r24, 0x2B	; 43
    12a4:	0e 94 19 08 	call	0x1032	; 0x1032 <PasswordChecking>

}
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <ChangePassword>:

void ChangePassword(void)
{
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte('-');
    12b6:	8d e2       	ldi	r24, 0x2D	; 45
    12b8:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <UART_sendByte>
	PasswordChecking('-');
    12bc:	8d e2       	ldi	r24, 0x2D	; 45
    12be:	0e 94 19 08 	call	0x1032	; 0x1032 <PasswordChecking>
}
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <Options>:

void Options(uint8 option)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	0f 92       	push	r0
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
    12d4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <LCD_clearScreen>

	if (option == '+')
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	8b 32       	cpi	r24, 0x2B	; 43
    12dc:	49 f4       	brne	.+18     	; 0x12f0 <Options+0x28>
	{
		LCD_goToRowColumn(0,4);
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	64 e0       	ldi	r22, 0x04	; 4
    12e2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_goToRowColumn>
		LCD_displayString("OPENED..");
    12e6:	8c eb       	ldi	r24, 0xBC	; 188
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_displayString>
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <Options+0x2c>
	}
	else
	{
		InsertPassword();
    12f0:	0e 94 b4 05 	call	0xb68	; 0xb68 <InsertPassword>
	}
}
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <LCD_init>:

#include <avr/io.h>
#include "LCD.h"

void LCD_init(void)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	LCD_CONTROL_PORT_DIRECTION |= (1 << RS) | (1 << RW) | (1 << E);
    1304:	a7 e3       	ldi	r26, 0x37	; 55
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e7 e3       	ldi	r30, 0x37	; 55
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	87 60       	ori	r24, 0x07	; 7
    1310:	8c 93       	st	X, r24
	LCD_DATA_PORT_DIRECTION = 0xFF;
    1312:	e4 e3       	ldi	r30, 0x34	; 52
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	80 83       	st	Z, r24
	LCD_sendCommand(CLEAR_SCREEN);
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	0e 94 96 09 	call	0x132c	; 0x132c <LCD_sendCommand>
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);
    1320:	8c e0       	ldi	r24, 0x0C	; 12
    1322:	0e 94 96 09 	call	0x132c	; 0x132c <LCD_sendCommand>
}
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <LCD_sendCommand>:

void LCD_sendCommand(uint8 Command)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	e9 97       	sbiw	r28, 0x39	; 57
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	89 af       	std	Y+57, r24	; 0x39
	LCD_CONTROL_PORT_OUTPUT &= (~(1 << RW));
    1342:	a8 e3       	ldi	r26, 0x38	; 56
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e8 e3       	ldi	r30, 0x38	; 56
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8d 7f       	andi	r24, 0xFD	; 253
    134e:	8c 93       	st	X, r24
	LCD_CONTROL_PORT_OUTPUT &= (~(1 << RS));
    1350:	a8 e3       	ldi	r26, 0x38	; 56
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e8 e3       	ldi	r30, 0x38	; 56
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8e 7f       	andi	r24, 0xFE	; 254
    135c:	8c 93       	st	X, r24
	LCD_CONTROL_PORT_OUTPUT &= (~(1 << E));
    135e:	a8 e3       	ldi	r26, 0x38	; 56
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e8 e3       	ldi	r30, 0x38	; 56
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	8b 7f       	andi	r24, 0xFB	; 251
    136a:	8c 93       	st	X, r24
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	a0 e8       	ldi	r26, 0x80	; 128
    1372:	bf e3       	ldi	r27, 0x3F	; 63
    1374:	8d ab       	std	Y+53, r24	; 0x35
    1376:	9e ab       	std	Y+54, r25	; 0x36
    1378:	af ab       	std	Y+55, r26	; 0x37
    137a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    137c:	6d a9       	ldd	r22, Y+53	; 0x35
    137e:	7e a9       	ldd	r23, Y+54	; 0x36
    1380:	8f a9       	ldd	r24, Y+55	; 0x37
    1382:	98 ad       	ldd	r25, Y+56	; 0x38
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	4a e7       	ldi	r20, 0x7A	; 122
    138a:	53 e4       	ldi	r21, 0x43	; 67
    138c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	89 ab       	std	Y+49, r24	; 0x31
    1396:	9a ab       	std	Y+50, r25	; 0x32
    1398:	ab ab       	std	Y+51, r26	; 0x33
    139a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    139c:	69 a9       	ldd	r22, Y+49	; 0x31
    139e:	7a a9       	ldd	r23, Y+50	; 0x32
    13a0:	8b a9       	ldd	r24, Y+51	; 0x33
    13a2:	9c a9       	ldd	r25, Y+52	; 0x34
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	40 e8       	ldi	r20, 0x80	; 128
    13aa:	5f e3       	ldi	r21, 0x3F	; 63
    13ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13b0:	88 23       	and	r24, r24
    13b2:	2c f4       	brge	.+10     	; 0x13be <LCD_sendCommand+0x92>
		__ticks = 1;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	98 ab       	std	Y+48, r25	; 0x30
    13ba:	8f a7       	std	Y+47, r24	; 0x2f
    13bc:	3f c0       	rjmp	.+126    	; 0x143c <LCD_sendCommand+0x110>
	else if (__tmp > 65535)
    13be:	69 a9       	ldd	r22, Y+49	; 0x31
    13c0:	7a a9       	ldd	r23, Y+50	; 0x32
    13c2:	8b a9       	ldd	r24, Y+51	; 0x33
    13c4:	9c a9       	ldd	r25, Y+52	; 0x34
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	3f ef       	ldi	r19, 0xFF	; 255
    13ca:	4f e7       	ldi	r20, 0x7F	; 127
    13cc:	57 e4       	ldi	r21, 0x47	; 71
    13ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13d2:	18 16       	cp	r1, r24
    13d4:	4c f5       	brge	.+82     	; 0x1428 <LCD_sendCommand+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d6:	6d a9       	ldd	r22, Y+53	; 0x35
    13d8:	7e a9       	ldd	r23, Y+54	; 0x36
    13da:	8f a9       	ldd	r24, Y+55	; 0x37
    13dc:	98 ad       	ldd	r25, Y+56	; 0x38
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e2       	ldi	r20, 0x20	; 32
    13e4:	51 e4       	ldi	r21, 0x41	; 65
    13e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	bc 01       	movw	r22, r24
    13f0:	cd 01       	movw	r24, r26
    13f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	98 ab       	std	Y+48, r25	; 0x30
    13fc:	8f a7       	std	Y+47, r24	; 0x2f
    13fe:	0f c0       	rjmp	.+30     	; 0x141e <LCD_sendCommand+0xf2>
    1400:	89 e1       	ldi	r24, 0x19	; 25
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	9e a7       	std	Y+46, r25	; 0x2e
    1406:	8d a7       	std	Y+45, r24	; 0x2d
    1408:	8d a5       	ldd	r24, Y+45	; 0x2d
    140a:	9e a5       	ldd	r25, Y+46	; 0x2e
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	f1 f7       	brne	.-4      	; 0x140c <LCD_sendCommand+0xe0>
    1410:	9e a7       	std	Y+46, r25	; 0x2e
    1412:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1414:	8f a5       	ldd	r24, Y+47	; 0x2f
    1416:	98 a9       	ldd	r25, Y+48	; 0x30
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	98 ab       	std	Y+48, r25	; 0x30
    141c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1420:	98 a9       	ldd	r25, Y+48	; 0x30
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	69 f7       	brne	.-38     	; 0x1400 <LCD_sendCommand+0xd4>
    1426:	14 c0       	rjmp	.+40     	; 0x1450 <LCD_sendCommand+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1428:	69 a9       	ldd	r22, Y+49	; 0x31
    142a:	7a a9       	ldd	r23, Y+50	; 0x32
    142c:	8b a9       	ldd	r24, Y+51	; 0x33
    142e:	9c a9       	ldd	r25, Y+52	; 0x34
    1430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	98 ab       	std	Y+48, r25	; 0x30
    143a:	8f a7       	std	Y+47, r24	; 0x2f
    143c:	8f a5       	ldd	r24, Y+47	; 0x2f
    143e:	98 a9       	ldd	r25, Y+48	; 0x30
    1440:	9c a7       	std	Y+44, r25	; 0x2c
    1442:	8b a7       	std	Y+43, r24	; 0x2b
    1444:	8b a5       	ldd	r24, Y+43	; 0x2b
    1446:	9c a5       	ldd	r25, Y+44	; 0x2c
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <LCD_sendCommand+0x11c>
    144c:	9c a7       	std	Y+44, r25	; 0x2c
    144e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_CONTROL_PORT_OUTPUT |= (1 << E);
    1450:	a8 e3       	ldi	r26, 0x38	; 56
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e8 e3       	ldi	r30, 0x38	; 56
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	84 60       	ori	r24, 0x04	; 4
    145c:	8c 93       	st	X, r24
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	a0 e8       	ldi	r26, 0x80	; 128
    1464:	bf e3       	ldi	r27, 0x3F	; 63
    1466:	8f a3       	std	Y+39, r24	; 0x27
    1468:	98 a7       	std	Y+40, r25	; 0x28
    146a:	a9 a7       	std	Y+41, r26	; 0x29
    146c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146e:	6f a1       	ldd	r22, Y+39	; 0x27
    1470:	78 a5       	ldd	r23, Y+40	; 0x28
    1472:	89 a5       	ldd	r24, Y+41	; 0x29
    1474:	9a a5       	ldd	r25, Y+42	; 0x2a
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	4a e7       	ldi	r20, 0x7A	; 122
    147c:	53 e4       	ldi	r21, 0x43	; 67
    147e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	8b a3       	std	Y+35, r24	; 0x23
    1488:	9c a3       	std	Y+36, r25	; 0x24
    148a:	ad a3       	std	Y+37, r26	; 0x25
    148c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    148e:	6b a1       	ldd	r22, Y+35	; 0x23
    1490:	7c a1       	ldd	r23, Y+36	; 0x24
    1492:	8d a1       	ldd	r24, Y+37	; 0x25
    1494:	9e a1       	ldd	r25, Y+38	; 0x26
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e8       	ldi	r20, 0x80	; 128
    149c:	5f e3       	ldi	r21, 0x3F	; 63
    149e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a2:	88 23       	and	r24, r24
    14a4:	2c f4       	brge	.+10     	; 0x14b0 <LCD_sendCommand+0x184>
		__ticks = 1;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	9a a3       	std	Y+34, r25	; 0x22
    14ac:	89 a3       	std	Y+33, r24	; 0x21
    14ae:	3f c0       	rjmp	.+126    	; 0x152e <LCD_sendCommand+0x202>
	else if (__tmp > 65535)
    14b0:	6b a1       	ldd	r22, Y+35	; 0x23
    14b2:	7c a1       	ldd	r23, Y+36	; 0x24
    14b4:	8d a1       	ldd	r24, Y+37	; 0x25
    14b6:	9e a1       	ldd	r25, Y+38	; 0x26
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	3f ef       	ldi	r19, 0xFF	; 255
    14bc:	4f e7       	ldi	r20, 0x7F	; 127
    14be:	57 e4       	ldi	r21, 0x47	; 71
    14c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c4:	18 16       	cp	r1, r24
    14c6:	4c f5       	brge	.+82     	; 0x151a <LCD_sendCommand+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c8:	6f a1       	ldd	r22, Y+39	; 0x27
    14ca:	78 a5       	ldd	r23, Y+40	; 0x28
    14cc:	89 a5       	ldd	r24, Y+41	; 0x29
    14ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	40 e2       	ldi	r20, 0x20	; 32
    14d6:	51 e4       	ldi	r21, 0x41	; 65
    14d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	bc 01       	movw	r22, r24
    14e2:	cd 01       	movw	r24, r26
    14e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	9a a3       	std	Y+34, r25	; 0x22
    14ee:	89 a3       	std	Y+33, r24	; 0x21
    14f0:	0f c0       	rjmp	.+30     	; 0x1510 <LCD_sendCommand+0x1e4>
    14f2:	89 e1       	ldi	r24, 0x19	; 25
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	98 a3       	std	Y+32, r25	; 0x20
    14f8:	8f 8f       	std	Y+31, r24	; 0x1f
    14fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14fc:	98 a1       	ldd	r25, Y+32	; 0x20
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <LCD_sendCommand+0x1d2>
    1502:	98 a3       	std	Y+32, r25	; 0x20
    1504:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1506:	89 a1       	ldd	r24, Y+33	; 0x21
    1508:	9a a1       	ldd	r25, Y+34	; 0x22
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	9a a3       	std	Y+34, r25	; 0x22
    150e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1510:	89 a1       	ldd	r24, Y+33	; 0x21
    1512:	9a a1       	ldd	r25, Y+34	; 0x22
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	69 f7       	brne	.-38     	; 0x14f2 <LCD_sendCommand+0x1c6>
    1518:	14 c0       	rjmp	.+40     	; 0x1542 <LCD_sendCommand+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151a:	6b a1       	ldd	r22, Y+35	; 0x23
    151c:	7c a1       	ldd	r23, Y+36	; 0x24
    151e:	8d a1       	ldd	r24, Y+37	; 0x25
    1520:	9e a1       	ldd	r25, Y+38	; 0x26
    1522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	9a a3       	std	Y+34, r25	; 0x22
    152c:	89 a3       	std	Y+33, r24	; 0x21
    152e:	89 a1       	ldd	r24, Y+33	; 0x21
    1530:	9a a1       	ldd	r25, Y+34	; 0x22
    1532:	9e 8f       	std	Y+30, r25	; 0x1e
    1534:	8d 8f       	std	Y+29, r24	; 0x1d
    1536:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1538:	9e 8d       	ldd	r25, Y+30	; 0x1e
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <LCD_sendCommand+0x20e>
    153e:	9e 8f       	std	Y+30, r25	; 0x1e
    1540:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT_OUTPUT = Command;
    1542:	e5 e3       	ldi	r30, 0x35	; 53
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	89 ad       	ldd	r24, Y+57	; 0x39
    1548:	80 83       	st	Z, r24
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a0 e8       	ldi	r26, 0x80	; 128
    1550:	bf e3       	ldi	r27, 0x3F	; 63
    1552:	89 8f       	std	Y+25, r24	; 0x19
    1554:	9a 8f       	std	Y+26, r25	; 0x1a
    1556:	ab 8f       	std	Y+27, r26	; 0x1b
    1558:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155a:	69 8d       	ldd	r22, Y+25	; 0x19
    155c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    155e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1560:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4a e7       	ldi	r20, 0x7A	; 122
    1568:	53 e4       	ldi	r21, 0x43	; 67
    156a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	8d 8b       	std	Y+21, r24	; 0x15
    1574:	9e 8b       	std	Y+22, r25	; 0x16
    1576:	af 8b       	std	Y+23, r26	; 0x17
    1578:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    157a:	6d 89       	ldd	r22, Y+21	; 0x15
    157c:	7e 89       	ldd	r23, Y+22	; 0x16
    157e:	8f 89       	ldd	r24, Y+23	; 0x17
    1580:	98 8d       	ldd	r25, Y+24	; 0x18
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e8       	ldi	r20, 0x80	; 128
    1588:	5f e3       	ldi	r21, 0x3F	; 63
    158a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    158e:	88 23       	and	r24, r24
    1590:	2c f4       	brge	.+10     	; 0x159c <LCD_sendCommand+0x270>
		__ticks = 1;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9c 8b       	std	Y+20, r25	; 0x14
    1598:	8b 8b       	std	Y+19, r24	; 0x13
    159a:	3f c0       	rjmp	.+126    	; 0x161a <LCD_sendCommand+0x2ee>
	else if (__tmp > 65535)
    159c:	6d 89       	ldd	r22, Y+21	; 0x15
    159e:	7e 89       	ldd	r23, Y+22	; 0x16
    15a0:	8f 89       	ldd	r24, Y+23	; 0x17
    15a2:	98 8d       	ldd	r25, Y+24	; 0x18
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	57 e4       	ldi	r21, 0x47	; 71
    15ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b0:	18 16       	cp	r1, r24
    15b2:	4c f5       	brge	.+82     	; 0x1606 <LCD_sendCommand+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b4:	69 8d       	ldd	r22, Y+25	; 0x19
    15b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	9c 8b       	std	Y+20, r25	; 0x14
    15da:	8b 8b       	std	Y+19, r24	; 0x13
    15dc:	0f c0       	rjmp	.+30     	; 0x15fc <LCD_sendCommand+0x2d0>
    15de:	89 e1       	ldi	r24, 0x19	; 25
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9a 8b       	std	Y+18, r25	; 0x12
    15e4:	89 8b       	std	Y+17, r24	; 0x11
    15e6:	89 89       	ldd	r24, Y+17	; 0x11
    15e8:	9a 89       	ldd	r25, Y+18	; 0x12
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <LCD_sendCommand+0x2be>
    15ee:	9a 8b       	std	Y+18, r25	; 0x12
    15f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f2:	8b 89       	ldd	r24, Y+19	; 0x13
    15f4:	9c 89       	ldd	r25, Y+20	; 0x14
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	9c 8b       	std	Y+20, r25	; 0x14
    15fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fc:	8b 89       	ldd	r24, Y+19	; 0x13
    15fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	69 f7       	brne	.-38     	; 0x15de <LCD_sendCommand+0x2b2>
    1604:	14 c0       	rjmp	.+40     	; 0x162e <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1606:	6d 89       	ldd	r22, Y+21	; 0x15
    1608:	7e 89       	ldd	r23, Y+22	; 0x16
    160a:	8f 89       	ldd	r24, Y+23	; 0x17
    160c:	98 8d       	ldd	r25, Y+24	; 0x18
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9c 8b       	std	Y+20, r25	; 0x14
    1618:	8b 8b       	std	Y+19, r24	; 0x13
    161a:	8b 89       	ldd	r24, Y+19	; 0x13
    161c:	9c 89       	ldd	r25, Y+20	; 0x14
    161e:	98 8b       	std	Y+16, r25	; 0x10
    1620:	8f 87       	std	Y+15, r24	; 0x0f
    1622:	8f 85       	ldd	r24, Y+15	; 0x0f
    1624:	98 89       	ldd	r25, Y+16	; 0x10
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <LCD_sendCommand+0x2fa>
    162a:	98 8b       	std	Y+16, r25	; 0x10
    162c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_CONTROL_PORT_OUTPUT &= (~(1 << E));
    162e:	a8 e3       	ldi	r26, 0x38	; 56
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e8 e3       	ldi	r30, 0x38	; 56
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	8b 7f       	andi	r24, 0xFB	; 251
    163a:	8c 93       	st	X, r24
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	a0 e8       	ldi	r26, 0x80	; 128
    1642:	bf e3       	ldi	r27, 0x3F	; 63
    1644:	8b 87       	std	Y+11, r24	; 0x0b
    1646:	9c 87       	std	Y+12, r25	; 0x0c
    1648:	ad 87       	std	Y+13, r26	; 0x0d
    164a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164c:	6b 85       	ldd	r22, Y+11	; 0x0b
    164e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1650:	8d 85       	ldd	r24, Y+13	; 0x0d
    1652:	9e 85       	ldd	r25, Y+14	; 0x0e
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	4a e7       	ldi	r20, 0x7A	; 122
    165a:	53 e4       	ldi	r21, 0x43	; 67
    165c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	8f 83       	std	Y+7, r24	; 0x07
    1666:	98 87       	std	Y+8, r25	; 0x08
    1668:	a9 87       	std	Y+9, r26	; 0x09
    166a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    166c:	6f 81       	ldd	r22, Y+7	; 0x07
    166e:	78 85       	ldd	r23, Y+8	; 0x08
    1670:	89 85       	ldd	r24, Y+9	; 0x09
    1672:	9a 85       	ldd	r25, Y+10	; 0x0a
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e8       	ldi	r20, 0x80	; 128
    167a:	5f e3       	ldi	r21, 0x3F	; 63
    167c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1680:	88 23       	and	r24, r24
    1682:	2c f4       	brge	.+10     	; 0x168e <LCD_sendCommand+0x362>
		__ticks = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9e 83       	std	Y+6, r25	; 0x06
    168a:	8d 83       	std	Y+5, r24	; 0x05
    168c:	3f c0       	rjmp	.+126    	; 0x170c <LCD_sendCommand+0x3e0>
	else if (__tmp > 65535)
    168e:	6f 81       	ldd	r22, Y+7	; 0x07
    1690:	78 85       	ldd	r23, Y+8	; 0x08
    1692:	89 85       	ldd	r24, Y+9	; 0x09
    1694:	9a 85       	ldd	r25, Y+10	; 0x0a
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	3f ef       	ldi	r19, 0xFF	; 255
    169a:	4f e7       	ldi	r20, 0x7F	; 127
    169c:	57 e4       	ldi	r21, 0x47	; 71
    169e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a2:	18 16       	cp	r1, r24
    16a4:	4c f5       	brge	.+82     	; 0x16f8 <LCD_sendCommand+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e2       	ldi	r20, 0x20	; 32
    16b4:	51 e4       	ldi	r21, 0x41	; 65
    16b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	bc 01       	movw	r22, r24
    16c0:	cd 01       	movw	r24, r26
    16c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	9e 83       	std	Y+6, r25	; 0x06
    16cc:	8d 83       	std	Y+5, r24	; 0x05
    16ce:	0f c0       	rjmp	.+30     	; 0x16ee <LCD_sendCommand+0x3c2>
    16d0:	89 e1       	ldi	r24, 0x19	; 25
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	9c 83       	std	Y+4, r25	; 0x04
    16d6:	8b 83       	std	Y+3, r24	; 0x03
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <LCD_sendCommand+0x3b0>
    16e0:	9c 83       	std	Y+4, r25	; 0x04
    16e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e4:	8d 81       	ldd	r24, Y+5	; 0x05
    16e6:	9e 81       	ldd	r25, Y+6	; 0x06
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	69 f7       	brne	.-38     	; 0x16d0 <LCD_sendCommand+0x3a4>
    16f6:	14 c0       	rjmp	.+40     	; 0x1720 <LCD_sendCommand+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f8:	6f 81       	ldd	r22, Y+7	; 0x07
    16fa:	78 85       	ldd	r23, Y+8	; 0x08
    16fc:	89 85       	ldd	r24, Y+9	; 0x09
    16fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
    170c:	8d 81       	ldd	r24, Y+5	; 0x05
    170e:	9e 81       	ldd	r25, Y+6	; 0x06
    1710:	9a 83       	std	Y+2, r25	; 0x02
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	9a 81       	ldd	r25, Y+2	; 0x02
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <LCD_sendCommand+0x3ec>
    171c:	9a 83       	std	Y+2, r25	; 0x02
    171e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1720:	e9 96       	adiw	r28, 0x39	; 57
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 Character)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	e9 97       	sbiw	r28, 0x39	; 57
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	89 af       	std	Y+57, r24	; 0x39
	LCD_CONTROL_PORT_OUTPUT &= (~(1 << RW));
    1748:	a8 e3       	ldi	r26, 0x38	; 56
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e8 e3       	ldi	r30, 0x38	; 56
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8d 7f       	andi	r24, 0xFD	; 253
    1754:	8c 93       	st	X, r24
	LCD_CONTROL_PORT_OUTPUT |= (1 << RS);
    1756:	a8 e3       	ldi	r26, 0x38	; 56
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e8 e3       	ldi	r30, 0x38	; 56
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	81 60       	ori	r24, 0x01	; 1
    1762:	8c 93       	st	X, r24
	LCD_CONTROL_PORT_OUTPUT &= (~(1 << E));
    1764:	a8 e3       	ldi	r26, 0x38	; 56
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e8 e3       	ldi	r30, 0x38	; 56
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	8b 7f       	andi	r24, 0xFB	; 251
    1770:	8c 93       	st	X, r24
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a0 e8       	ldi	r26, 0x80	; 128
    1778:	bf e3       	ldi	r27, 0x3F	; 63
    177a:	8d ab       	std	Y+53, r24	; 0x35
    177c:	9e ab       	std	Y+54, r25	; 0x36
    177e:	af ab       	std	Y+55, r26	; 0x37
    1780:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1782:	6d a9       	ldd	r22, Y+53	; 0x35
    1784:	7e a9       	ldd	r23, Y+54	; 0x36
    1786:	8f a9       	ldd	r24, Y+55	; 0x37
    1788:	98 ad       	ldd	r25, Y+56	; 0x38
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	4a e7       	ldi	r20, 0x7A	; 122
    1790:	53 e4       	ldi	r21, 0x43	; 67
    1792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	89 ab       	std	Y+49, r24	; 0x31
    179c:	9a ab       	std	Y+50, r25	; 0x32
    179e:	ab ab       	std	Y+51, r26	; 0x33
    17a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17a2:	69 a9       	ldd	r22, Y+49	; 0x31
    17a4:	7a a9       	ldd	r23, Y+50	; 0x32
    17a6:	8b a9       	ldd	r24, Y+51	; 0x33
    17a8:	9c a9       	ldd	r25, Y+52	; 0x34
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e8       	ldi	r20, 0x80	; 128
    17b0:	5f e3       	ldi	r21, 0x3F	; 63
    17b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b6:	88 23       	and	r24, r24
    17b8:	2c f4       	brge	.+10     	; 0x17c4 <LCD_displayCharacter+0x92>
		__ticks = 1;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	98 ab       	std	Y+48, r25	; 0x30
    17c0:	8f a7       	std	Y+47, r24	; 0x2f
    17c2:	3f c0       	rjmp	.+126    	; 0x1842 <LCD_displayCharacter+0x110>
	else if (__tmp > 65535)
    17c4:	69 a9       	ldd	r22, Y+49	; 0x31
    17c6:	7a a9       	ldd	r23, Y+50	; 0x32
    17c8:	8b a9       	ldd	r24, Y+51	; 0x33
    17ca:	9c a9       	ldd	r25, Y+52	; 0x34
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
    17d0:	4f e7       	ldi	r20, 0x7F	; 127
    17d2:	57 e4       	ldi	r21, 0x47	; 71
    17d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d8:	18 16       	cp	r1, r24
    17da:	4c f5       	brge	.+82     	; 0x182e <LCD_displayCharacter+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17dc:	6d a9       	ldd	r22, Y+53	; 0x35
    17de:	7e a9       	ldd	r23, Y+54	; 0x36
    17e0:	8f a9       	ldd	r24, Y+55	; 0x37
    17e2:	98 ad       	ldd	r25, Y+56	; 0x38
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e2       	ldi	r20, 0x20	; 32
    17ea:	51 e4       	ldi	r21, 0x41	; 65
    17ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	98 ab       	std	Y+48, r25	; 0x30
    1802:	8f a7       	std	Y+47, r24	; 0x2f
    1804:	0f c0       	rjmp	.+30     	; 0x1824 <LCD_displayCharacter+0xf2>
    1806:	89 e1       	ldi	r24, 0x19	; 25
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	9e a7       	std	Y+46, r25	; 0x2e
    180c:	8d a7       	std	Y+45, r24	; 0x2d
    180e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1810:	9e a5       	ldd	r25, Y+46	; 0x2e
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <LCD_displayCharacter+0xe0>
    1816:	9e a7       	std	Y+46, r25	; 0x2e
    1818:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181a:	8f a5       	ldd	r24, Y+47	; 0x2f
    181c:	98 a9       	ldd	r25, Y+48	; 0x30
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	98 ab       	std	Y+48, r25	; 0x30
    1822:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1824:	8f a5       	ldd	r24, Y+47	; 0x2f
    1826:	98 a9       	ldd	r25, Y+48	; 0x30
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	69 f7       	brne	.-38     	; 0x1806 <LCD_displayCharacter+0xd4>
    182c:	14 c0       	rjmp	.+40     	; 0x1856 <LCD_displayCharacter+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182e:	69 a9       	ldd	r22, Y+49	; 0x31
    1830:	7a a9       	ldd	r23, Y+50	; 0x32
    1832:	8b a9       	ldd	r24, Y+51	; 0x33
    1834:	9c a9       	ldd	r25, Y+52	; 0x34
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	98 ab       	std	Y+48, r25	; 0x30
    1840:	8f a7       	std	Y+47, r24	; 0x2f
    1842:	8f a5       	ldd	r24, Y+47	; 0x2f
    1844:	98 a9       	ldd	r25, Y+48	; 0x30
    1846:	9c a7       	std	Y+44, r25	; 0x2c
    1848:	8b a7       	std	Y+43, r24	; 0x2b
    184a:	8b a5       	ldd	r24, Y+43	; 0x2b
    184c:	9c a5       	ldd	r25, Y+44	; 0x2c
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <LCD_displayCharacter+0x11c>
    1852:	9c a7       	std	Y+44, r25	; 0x2c
    1854:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_CONTROL_PORT_OUTPUT |= (1 << E);
    1856:	a8 e3       	ldi	r26, 0x38	; 56
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e8 e3       	ldi	r30, 0x38	; 56
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	84 60       	ori	r24, 0x04	; 4
    1862:	8c 93       	st	X, r24
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	a0 e8       	ldi	r26, 0x80	; 128
    186a:	bf e3       	ldi	r27, 0x3F	; 63
    186c:	8f a3       	std	Y+39, r24	; 0x27
    186e:	98 a7       	std	Y+40, r25	; 0x28
    1870:	a9 a7       	std	Y+41, r26	; 0x29
    1872:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1874:	6f a1       	ldd	r22, Y+39	; 0x27
    1876:	78 a5       	ldd	r23, Y+40	; 0x28
    1878:	89 a5       	ldd	r24, Y+41	; 0x29
    187a:	9a a5       	ldd	r25, Y+42	; 0x2a
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	4a e7       	ldi	r20, 0x7A	; 122
    1882:	53 e4       	ldi	r21, 0x43	; 67
    1884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	8b a3       	std	Y+35, r24	; 0x23
    188e:	9c a3       	std	Y+36, r25	; 0x24
    1890:	ad a3       	std	Y+37, r26	; 0x25
    1892:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1894:	6b a1       	ldd	r22, Y+35	; 0x23
    1896:	7c a1       	ldd	r23, Y+36	; 0x24
    1898:	8d a1       	ldd	r24, Y+37	; 0x25
    189a:	9e a1       	ldd	r25, Y+38	; 0x26
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e8       	ldi	r20, 0x80	; 128
    18a2:	5f e3       	ldi	r21, 0x3F	; 63
    18a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a8:	88 23       	and	r24, r24
    18aa:	2c f4       	brge	.+10     	; 0x18b6 <LCD_displayCharacter+0x184>
		__ticks = 1;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9a a3       	std	Y+34, r25	; 0x22
    18b2:	89 a3       	std	Y+33, r24	; 0x21
    18b4:	3f c0       	rjmp	.+126    	; 0x1934 <LCD_displayCharacter+0x202>
	else if (__tmp > 65535)
    18b6:	6b a1       	ldd	r22, Y+35	; 0x23
    18b8:	7c a1       	ldd	r23, Y+36	; 0x24
    18ba:	8d a1       	ldd	r24, Y+37	; 0x25
    18bc:	9e a1       	ldd	r25, Y+38	; 0x26
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	3f ef       	ldi	r19, 0xFF	; 255
    18c2:	4f e7       	ldi	r20, 0x7F	; 127
    18c4:	57 e4       	ldi	r21, 0x47	; 71
    18c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ca:	18 16       	cp	r1, r24
    18cc:	4c f5       	brge	.+82     	; 0x1920 <LCD_displayCharacter+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ce:	6f a1       	ldd	r22, Y+39	; 0x27
    18d0:	78 a5       	ldd	r23, Y+40	; 0x28
    18d2:	89 a5       	ldd	r24, Y+41	; 0x29
    18d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e2       	ldi	r20, 0x20	; 32
    18dc:	51 e4       	ldi	r21, 0x41	; 65
    18de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	bc 01       	movw	r22, r24
    18e8:	cd 01       	movw	r24, r26
    18ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	9a a3       	std	Y+34, r25	; 0x22
    18f4:	89 a3       	std	Y+33, r24	; 0x21
    18f6:	0f c0       	rjmp	.+30     	; 0x1916 <LCD_displayCharacter+0x1e4>
    18f8:	89 e1       	ldi	r24, 0x19	; 25
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	98 a3       	std	Y+32, r25	; 0x20
    18fe:	8f 8f       	std	Y+31, r24	; 0x1f
    1900:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1902:	98 a1       	ldd	r25, Y+32	; 0x20
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	f1 f7       	brne	.-4      	; 0x1904 <LCD_displayCharacter+0x1d2>
    1908:	98 a3       	std	Y+32, r25	; 0x20
    190a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190c:	89 a1       	ldd	r24, Y+33	; 0x21
    190e:	9a a1       	ldd	r25, Y+34	; 0x22
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	9a a3       	std	Y+34, r25	; 0x22
    1914:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1916:	89 a1       	ldd	r24, Y+33	; 0x21
    1918:	9a a1       	ldd	r25, Y+34	; 0x22
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	69 f7       	brne	.-38     	; 0x18f8 <LCD_displayCharacter+0x1c6>
    191e:	14 c0       	rjmp	.+40     	; 0x1948 <LCD_displayCharacter+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1920:	6b a1       	ldd	r22, Y+35	; 0x23
    1922:	7c a1       	ldd	r23, Y+36	; 0x24
    1924:	8d a1       	ldd	r24, Y+37	; 0x25
    1926:	9e a1       	ldd	r25, Y+38	; 0x26
    1928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	9a a3       	std	Y+34, r25	; 0x22
    1932:	89 a3       	std	Y+33, r24	; 0x21
    1934:	89 a1       	ldd	r24, Y+33	; 0x21
    1936:	9a a1       	ldd	r25, Y+34	; 0x22
    1938:	9e 8f       	std	Y+30, r25	; 0x1e
    193a:	8d 8f       	std	Y+29, r24	; 0x1d
    193c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    193e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <LCD_displayCharacter+0x20e>
    1944:	9e 8f       	std	Y+30, r25	; 0x1e
    1946:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT_OUTPUT = Character;
    1948:	e5 e3       	ldi	r30, 0x35	; 53
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	89 ad       	ldd	r24, Y+57	; 0x39
    194e:	80 83       	st	Z, r24
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a0 e8       	ldi	r26, 0x80	; 128
    1956:	bf e3       	ldi	r27, 0x3F	; 63
    1958:	89 8f       	std	Y+25, r24	; 0x19
    195a:	9a 8f       	std	Y+26, r25	; 0x1a
    195c:	ab 8f       	std	Y+27, r26	; 0x1b
    195e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1960:	69 8d       	ldd	r22, Y+25	; 0x19
    1962:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1964:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1966:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4a e7       	ldi	r20, 0x7A	; 122
    196e:	53 e4       	ldi	r21, 0x43	; 67
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	8d 8b       	std	Y+21, r24	; 0x15
    197a:	9e 8b       	std	Y+22, r25	; 0x16
    197c:	af 8b       	std	Y+23, r26	; 0x17
    197e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1980:	6d 89       	ldd	r22, Y+21	; 0x15
    1982:	7e 89       	ldd	r23, Y+22	; 0x16
    1984:	8f 89       	ldd	r24, Y+23	; 0x17
    1986:	98 8d       	ldd	r25, Y+24	; 0x18
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e8       	ldi	r20, 0x80	; 128
    198e:	5f e3       	ldi	r21, 0x3F	; 63
    1990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1994:	88 23       	and	r24, r24
    1996:	2c f4       	brge	.+10     	; 0x19a2 <LCD_displayCharacter+0x270>
		__ticks = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9c 8b       	std	Y+20, r25	; 0x14
    199e:	8b 8b       	std	Y+19, r24	; 0x13
    19a0:	3f c0       	rjmp	.+126    	; 0x1a20 <LCD_displayCharacter+0x2ee>
	else if (__tmp > 65535)
    19a2:	6d 89       	ldd	r22, Y+21	; 0x15
    19a4:	7e 89       	ldd	r23, Y+22	; 0x16
    19a6:	8f 89       	ldd	r24, Y+23	; 0x17
    19a8:	98 8d       	ldd	r25, Y+24	; 0x18
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	3f ef       	ldi	r19, 0xFF	; 255
    19ae:	4f e7       	ldi	r20, 0x7F	; 127
    19b0:	57 e4       	ldi	r21, 0x47	; 71
    19b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	4c f5       	brge	.+82     	; 0x1a0c <LCD_displayCharacter+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ba:	69 8d       	ldd	r22, Y+25	; 0x19
    19bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e2       	ldi	r20, 0x20	; 32
    19c8:	51 e4       	ldi	r21, 0x41	; 65
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9c 8b       	std	Y+20, r25	; 0x14
    19e0:	8b 8b       	std	Y+19, r24	; 0x13
    19e2:	0f c0       	rjmp	.+30     	; 0x1a02 <LCD_displayCharacter+0x2d0>
    19e4:	89 e1       	ldi	r24, 0x19	; 25
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9a 8b       	std	Y+18, r25	; 0x12
    19ea:	89 8b       	std	Y+17, r24	; 0x11
    19ec:	89 89       	ldd	r24, Y+17	; 0x11
    19ee:	9a 89       	ldd	r25, Y+18	; 0x12
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <LCD_displayCharacter+0x2be>
    19f4:	9a 8b       	std	Y+18, r25	; 0x12
    19f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f8:	8b 89       	ldd	r24, Y+19	; 0x13
    19fa:	9c 89       	ldd	r25, Y+20	; 0x14
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	9c 8b       	std	Y+20, r25	; 0x14
    1a00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a02:	8b 89       	ldd	r24, Y+19	; 0x13
    1a04:	9c 89       	ldd	r25, Y+20	; 0x14
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	69 f7       	brne	.-38     	; 0x19e4 <LCD_displayCharacter+0x2b2>
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a10:	8f 89       	ldd	r24, Y+23	; 0x17
    1a12:	98 8d       	ldd	r25, Y+24	; 0x18
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9c 8b       	std	Y+20, r25	; 0x14
    1a1e:	8b 8b       	std	Y+19, r24	; 0x13
    1a20:	8b 89       	ldd	r24, Y+19	; 0x13
    1a22:	9c 89       	ldd	r25, Y+20	; 0x14
    1a24:	98 8b       	std	Y+16, r25	; 0x10
    1a26:	8f 87       	std	Y+15, r24	; 0x0f
    1a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a2a:	98 89       	ldd	r25, Y+16	; 0x10
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <LCD_displayCharacter+0x2fa>
    1a30:	98 8b       	std	Y+16, r25	; 0x10
    1a32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_CONTROL_PORT_OUTPUT &= (~(1 << E));
    1a34:	a8 e3       	ldi	r26, 0x38	; 56
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e8 e3       	ldi	r30, 0x38	; 56
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	8b 7f       	andi	r24, 0xFB	; 251
    1a40:	8c 93       	st	X, r24
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	a0 e8       	ldi	r26, 0x80	; 128
    1a48:	bf e3       	ldi	r27, 0x3F	; 63
    1a4a:	8b 87       	std	Y+11, r24	; 0x0b
    1a4c:	9c 87       	std	Y+12, r25	; 0x0c
    1a4e:	ad 87       	std	Y+13, r26	; 0x0d
    1a50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	4a e7       	ldi	r20, 0x7A	; 122
    1a60:	53 e4       	ldi	r21, 0x43	; 67
    1a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	8f 83       	std	Y+7, r24	; 0x07
    1a6c:	98 87       	std	Y+8, r25	; 0x08
    1a6e:	a9 87       	std	Y+9, r26	; 0x09
    1a70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a72:	6f 81       	ldd	r22, Y+7	; 0x07
    1a74:	78 85       	ldd	r23, Y+8	; 0x08
    1a76:	89 85       	ldd	r24, Y+9	; 0x09
    1a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e8       	ldi	r20, 0x80	; 128
    1a80:	5f e3       	ldi	r21, 0x3F	; 63
    1a82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a86:	88 23       	and	r24, r24
    1a88:	2c f4       	brge	.+10     	; 0x1a94 <LCD_displayCharacter+0x362>
		__ticks = 1;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	9e 83       	std	Y+6, r25	; 0x06
    1a90:	8d 83       	std	Y+5, r24	; 0x05
    1a92:	3f c0       	rjmp	.+126    	; 0x1b12 <LCD_displayCharacter+0x3e0>
	else if (__tmp > 65535)
    1a94:	6f 81       	ldd	r22, Y+7	; 0x07
    1a96:	78 85       	ldd	r23, Y+8	; 0x08
    1a98:	89 85       	ldd	r24, Y+9	; 0x09
    1a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	3f ef       	ldi	r19, 0xFF	; 255
    1aa0:	4f e7       	ldi	r20, 0x7F	; 127
    1aa2:	57 e4       	ldi	r21, 0x47	; 71
    1aa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa8:	18 16       	cp	r1, r24
    1aaa:	4c f5       	brge	.+82     	; 0x1afe <LCD_displayCharacter+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e2       	ldi	r20, 0x20	; 32
    1aba:	51 e4       	ldi	r21, 0x41	; 65
    1abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	9e 83       	std	Y+6, r25	; 0x06
    1ad2:	8d 83       	std	Y+5, r24	; 0x05
    1ad4:	0f c0       	rjmp	.+30     	; 0x1af4 <LCD_displayCharacter+0x3c2>
    1ad6:	89 e1       	ldi	r24, 0x19	; 25
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9c 83       	std	Y+4, r25	; 0x04
    1adc:	8b 83       	std	Y+3, r24	; 0x03
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <LCD_displayCharacter+0x3b0>
    1ae6:	9c 83       	std	Y+4, r25	; 0x04
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aea:	8d 81       	ldd	r24, Y+5	; 0x05
    1aec:	9e 81       	ldd	r25, Y+6	; 0x06
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	69 f7       	brne	.-38     	; 0x1ad6 <LCD_displayCharacter+0x3a4>
    1afc:	14 c0       	rjmp	.+40     	; 0x1b26 <LCD_displayCharacter+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afe:	6f 81       	ldd	r22, Y+7	; 0x07
    1b00:	78 85       	ldd	r23, Y+8	; 0x08
    1b02:	89 85       	ldd	r24, Y+9	; 0x09
    1b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	9e 83       	std	Y+6, r25	; 0x06
    1b10:	8d 83       	std	Y+5, r24	; 0x05
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	9a 83       	std	Y+2, r25	; 0x02
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <LCD_displayCharacter+0x3ec>
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1b26:	e9 96       	adiw	r28, 0x39	; 57
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <LCD_displayString>:

void LCD_displayString(uint8 * String)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <LCD_displayString+0x6>
    1b3e:	0f 92       	push	r0
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	9b 83       	std	Y+3, r25	; 0x03
    1b46:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1b48:	19 82       	std	Y+1, r1	; 0x01
    1b4a:	0e c0       	rjmp	.+28     	; 0x1b68 <LCD_displayString+0x30>

	while (String[i] != '\0')
	{
		LCD_displayCharacter(String[i]);
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	9b 81       	ldd	r25, Y+3	; 0x03
    1b56:	fc 01       	movw	r30, r24
    1b58:	e2 0f       	add	r30, r18
    1b5a:	f3 1f       	adc	r31, r19
    1b5c:	80 81       	ld	r24, Z
    1b5e:	0e 94 99 0b 	call	0x1732	; 0x1732 <LCD_displayCharacter>
		i++;
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	8f 5f       	subi	r24, 0xFF	; 255
    1b66:	89 83       	std	Y+1, r24	; 0x01

void LCD_displayString(uint8 * String)
{
	uint8 i = 0;

	while (String[i] != '\0')
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	9b 81       	ldd	r25, Y+3	; 0x03
    1b72:	fc 01       	movw	r30, r24
    1b74:	e2 0f       	add	r30, r18
    1b76:	f3 1f       	adc	r31, r19
    1b78:	80 81       	ld	r24, Z
    1b7a:	88 23       	and	r24, r24
    1b7c:	39 f7       	brne	.-50     	; 0x1b4c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(String[i]);
		i++;
	}
}
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 Row, uint8 Column)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <LCD_goToRowColumn+0x6>
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <LCD_goToRowColumn+0x8>
    1b92:	0f 92       	push	r0
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	8a 83       	std	Y+2, r24	; 0x02
    1b9a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address = 0;
    1b9c:	19 82       	std	Y+1, r1	; 0x01

	switch (Row)
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	3d 83       	std	Y+5, r19	; 0x05
    1ba6:	2c 83       	std	Y+4, r18	; 0x04
    1ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    1baa:	9d 81       	ldd	r25, Y+5	; 0x05
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	91 05       	cpc	r25, r1
    1bb0:	c1 f0       	breq	.+48     	; 0x1be2 <LCD_goToRowColumn+0x58>
    1bb2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb6:	22 30       	cpi	r18, 0x02	; 2
    1bb8:	31 05       	cpc	r19, r1
    1bba:	2c f4       	brge	.+10     	; 0x1bc6 <LCD_goToRowColumn+0x3c>
    1bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc0:	00 97       	sbiw	r24, 0x00	; 0
    1bc2:	61 f0       	breq	.+24     	; 0x1bdc <LCD_goToRowColumn+0x52>
    1bc4:	19 c0       	rjmp	.+50     	; 0x1bf8 <LCD_goToRowColumn+0x6e>
    1bc6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bca:	22 30       	cpi	r18, 0x02	; 2
    1bcc:	31 05       	cpc	r19, r1
    1bce:	69 f0       	breq	.+26     	; 0x1bea <LCD_goToRowColumn+0x60>
    1bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd4:	83 30       	cpi	r24, 0x03	; 3
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	61 f0       	breq	.+24     	; 0x1bf2 <LCD_goToRowColumn+0x68>
    1bda:	0e c0       	rjmp	.+28     	; 0x1bf8 <LCD_goToRowColumn+0x6e>
	{

	case 0: Address = Column;
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	0b c0       	rjmp	.+22     	; 0x1bf8 <LCD_goToRowColumn+0x6e>
	break;

	case 1: Address = Column + 0x40;
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	80 5c       	subi	r24, 0xC0	; 192
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	07 c0       	rjmp	.+14     	; 0x1bf8 <LCD_goToRowColumn+0x6e>
	break;

	case 2: Address = Column + 0x10;
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	80 5f       	subi	r24, 0xF0	; 240
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	03 c0       	rjmp	.+6      	; 0x1bf8 <LCD_goToRowColumn+0x6e>
	break;

	case 3: Address = Column + 0x50;
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	80 5b       	subi	r24, 0xB0	; 176
    1bf6:	89 83       	std	Y+1, r24	; 0x01

	default: break;

	}

	LCD_sendCommand(0x80 + Address);
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	80 58       	subi	r24, 0x80	; 128
    1bfc:	0e 94 96 09 	call	0x132c	; 0x132c <LCD_sendCommand>

}
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	08 95       	ret

00001c10 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 Row, uint8 Column, uint8 * String)
{
    1c10:	df 93       	push	r29
    1c12:	cf 93       	push	r28
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <LCD_displayStringRowColumn+0x6>
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <LCD_displayStringRowColumn+0x8>
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	6a 83       	std	Y+2, r22	; 0x02
    1c20:	5c 83       	std	Y+4, r21	; 0x04
    1c22:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(Row, Column);
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	6a 81       	ldd	r22, Y+2	; 0x02
    1c28:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_goToRowColumn>
	LCD_displayString(String);
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_displayString>
}
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN);
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	0e 94 96 09 	call	0x132c	; 0x132c <LCD_sendCommand>
}
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <__vector_13>:
volatile uint8 g_UART_Transmitted_Data_Flag = 0;
volatile uint8 g_UART_Recieved_Data_Flag = 0;
volatile uint8 g_UART_Recieved_Data = 0;

ISR (USART_TXC_vect)
{
    1c56:	1f 92       	push	r1
    1c58:	0f 92       	push	r0
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	0f 92       	push	r0
    1c5e:	11 24       	eor	r1, r1
    1c60:	8f 93       	push	r24
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
	g_UART_Transmitted_Data_Flag = 1;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	80 93 d1 00 	sts	0x00D1, r24
}
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	8f 91       	pop	r24
    1c76:	0f 90       	pop	r0
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	0f 90       	pop	r0
    1c7c:	1f 90       	pop	r1
    1c7e:	18 95       	reti

00001c80 <__vector_11>:

ISR (USART_RXC_vect)
{
    1c80:	1f 92       	push	r1
    1c82:	0f 92       	push	r0
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	0f 92       	push	r0
    1c88:	11 24       	eor	r1, r1
    1c8a:	8f 93       	push	r24
    1c8c:	ef 93       	push	r30
    1c8e:	ff 93       	push	r31
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
	g_UART_Recieved_Data_Flag = 1;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	80 93 d2 00 	sts	0x00D2, r24
	g_UART_Recieved_Data = UDR;
    1c9e:	ec e2       	ldi	r30, 0x2C	; 44
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	80 93 d3 00 	sts	0x00D3, r24
}
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	ff 91       	pop	r31
    1cae:	ef 91       	pop	r30
    1cb0:	8f 91       	pop	r24
    1cb2:	0f 90       	pop	r0
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	0f 90       	pop	r0
    1cb8:	1f 90       	pop	r1
    1cba:	18 95       	reti

00001cbc <UART_init>:


void UART_init(uint16 baudRate)
{
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <UART_init+0xa>
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	9a 83       	std	Y+2, r25	; 0x02
    1ccc:	89 83       	std	Y+1, r24	; 0x01

	SREG |= (1 << 7);
    1cce:	af e5       	ldi	r26, 0x5F	; 95
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	ef e5       	ldi	r30, 0x5F	; 95
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	80 68       	ori	r24, 0x80	; 128
    1cda:	8c 93       	st	X, r24
	/*
	 * Enable Receiver
	 * Enable Transmitter
	 * Enable interrupts for RX & TX
	 * */
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << TXCIE) | (1 << RXCIE);
    1cdc:	aa e2       	ldi	r26, 0x2A	; 42
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	ea e2       	ldi	r30, 0x2A	; 42
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	88 6d       	ori	r24, 0xD8	; 216
    1ce8:	8c 93       	st	X, r24
	 * Asynchronous mode
	 * 8 bits character size
	 * 1 stop bit
	 * No Parity
	 * */
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
    1cea:	a0 e4       	ldi	r26, 0x40	; 64
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	e0 e4       	ldi	r30, 0x40	; 64
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	86 68       	ori	r24, 0x86	; 134
    1cf6:	8c 93       	st	X, r24
	/*
	 * UBRR Register calculations
	 * */

	UBRRL = (F_CPU / (16 * baudRate)) - 1;
    1cf8:	09 e2       	ldi	r16, 0x29	; 41
    1cfa:	10 e0       	ldi	r17, 0x00	; 0
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1d00:	82 95       	swap	r24
    1d02:	92 95       	swap	r25
    1d04:	90 7f       	andi	r25, 0xF0	; 240
    1d06:	98 27       	eor	r25, r24
    1d08:	80 7f       	andi	r24, 0xF0	; 240
    1d0a:	98 27       	eor	r25, r24
    1d0c:	9c 01       	movw	r18, r24
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	50 e0       	ldi	r21, 0x00	; 0
    1d12:	80 e4       	ldi	r24, 0x40	; 64
    1d14:	92 e4       	ldi	r25, 0x42	; 66
    1d16:	af e0       	ldi	r26, 0x0F	; 15
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
    1d22:	da 01       	movw	r26, r20
    1d24:	c9 01       	movw	r24, r18
    1d26:	81 50       	subi	r24, 0x01	; 1
    1d28:	f8 01       	movw	r30, r16
    1d2a:	80 83       	st	Z, r24

	DDRD |= (1 << PD1);
    1d2c:	a1 e3       	ldi	r26, 0x31	; 49
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e1 e3       	ldi	r30, 0x31	; 49
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	82 60       	ori	r24, 0x02	; 2
    1d38:	8c 93       	st	X, r24
	DDRD &= (~(1 << PD0));
    1d3a:	a1 e3       	ldi	r26, 0x31	; 49
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e1 e3       	ldi	r30, 0x31	; 49
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8e 7f       	andi	r24, 0xFE	; 254
    1d46:	8c 93       	st	X, r24


}
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	08 95       	ret

00001d56 <UART_sendByte>:

void UART_sendByte(uint8 Data)
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	0f 92       	push	r0
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	89 83       	std	Y+1, r24	; 0x01
	UDR = Data;
    1d62:	ec e2       	ldi	r30, 0x2C	; 44
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	80 83       	st	Z, r24
	while (g_UART_Transmitted_Data_Flag == 0);
    1d6a:	80 91 d1 00 	lds	r24, 0x00D1
    1d6e:	88 23       	and	r24, r24
    1d70:	e1 f3       	breq	.-8      	; 0x1d6a <UART_sendByte+0x14>
	g_UART_Transmitted_Data_Flag = 0;
    1d72:	10 92 d1 00 	sts	0x00D1, r1
}
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
	while (g_UART_Recieved_Data_Flag == 0);
    1d86:	80 91 d2 00 	lds	r24, 0x00D2
    1d8a:	88 23       	and	r24, r24
    1d8c:	e1 f3       	breq	.-8      	; 0x1d86 <UART_recieveByte+0x8>
	g_UART_Recieved_Data_Flag = 0;
    1d8e:	10 92 d2 00 	sts	0x00D2, r1
	return g_UART_Recieved_Data;
    1d92:	80 91 d3 00 	lds	r24, 0x00D3
}
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <UART_sendString>:

void UART_sendString(uint8 * str)
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <UART_sendString+0x6>
    1da2:	0f 92       	push	r0
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	9b 83       	std	Y+3, r25	; 0x03
    1daa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1dac:	19 82       	std	Y+1, r1	; 0x01
    1dae:	0e c0       	rjmp	.+28     	; 0x1dcc <UART_sendString+0x30>

	while (str[i] != '\0')
	{
		UART_sendByte(str[i]);
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dba:	fc 01       	movw	r30, r24
    1dbc:	e2 0f       	add	r30, r18
    1dbe:	f3 1f       	adc	r31, r19
    1dc0:	80 81       	ld	r24, Z
    1dc2:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <UART_sendByte>
		i++;
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	8f 5f       	subi	r24, 0xFF	; 255
    1dca:	89 83       	std	Y+1, r24	; 0x01

void UART_sendString(uint8 * str)
{
	uint8 i = 0;

	while (str[i] != '\0')
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	e2 0f       	add	r30, r18
    1dda:	f3 1f       	adc	r31, r19
    1ddc:	80 81       	ld	r24, Z
    1dde:	88 23       	and	r24, r24
    1de0:	39 f7       	brne	.-50     	; 0x1db0 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
}
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <UART_recieveString>:

void UART_recieveString(uint8 * str)
{
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <UART_recieveString+0xa>
    1df8:	0f 92       	push	r0
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	9b 83       	std	Y+3, r25	; 0x03
    1e00:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e02:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_recieveByte();
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0e:	8c 01       	movw	r16, r24
    1e10:	02 0f       	add	r16, r18
    1e12:	13 1f       	adc	r17, r19
    1e14:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <UART_recieveByte>
    1e18:	f8 01       	movw	r30, r16
    1e1a:	80 83       	st	Z, r24
    1e1c:	0f c0       	rjmp	.+30     	; 0x1e3c <UART_recieveString+0x4e>

	while (str[i] != '#')
	{
		i++;
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	8f 5f       	subi	r24, 0xFF	; 255
    1e22:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_recieveByte();
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2e:	8c 01       	movw	r16, r24
    1e30:	02 0f       	add	r16, r18
    1e32:	13 1f       	adc	r17, r19
    1e34:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <UART_recieveByte>
    1e38:	f8 01       	movw	r30, r16
    1e3a:	80 83       	st	Z, r24
void UART_recieveString(uint8 * str)
{
	uint8 i = 0;
	str[i] = UART_recieveByte();

	while (str[i] != '#')
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	9b 81       	ldd	r25, Y+3	; 0x03
    1e46:	fc 01       	movw	r30, r24
    1e48:	e2 0f       	add	r30, r18
    1e4a:	f3 1f       	adc	r31, r19
    1e4c:	80 81       	ld	r24, Z
    1e4e:	83 32       	cpi	r24, 0x23	; 35
    1e50:	31 f7       	brne	.-52     	; 0x1e1e <UART_recieveString+0x30>
	{
		i++;
		str[i] = UART_recieveByte();
	}

	str[i] = '\0';
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	e2 0f       	add	r30, r18
    1e60:	f3 1f       	adc	r31, r19
    1e62:	10 82       	st	Z, r1

}
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	08 95       	ret

00001e74 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void)
{
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <KeyPad_getPressedKey+0x6>
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1e7e:	1a 82       	std	Y+2, r1	; 0x02
    1e80:	4c c0       	rjmp	.+152    	; 0x1f1a <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1e82:	ea e3       	ldi	r30, 0x3A	; 58
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	80 e1       	ldi	r24, 0x10	; 16
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <KeyPad_getPressedKey+0x22>
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	2a 95       	dec	r18
    1e98:	e2 f7       	brpl	.-8      	; 0x1e92 <KeyPad_getPressedKey+0x1e>
    1e9a:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    1e9c:	eb e3       	ldi	r30, 0x3B	; 59
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	80 e1       	ldi	r24, 0x10	; 16
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	02 2e       	mov	r0, r18
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <KeyPad_getPressedKey+0x3e>
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	0a 94       	dec	r0
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <KeyPad_getPressedKey+0x3a>
    1eb6:	80 95       	com	r24
    1eb8:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    1eba:	19 82       	std	Y+1, r1	; 0x01
    1ebc:	28 c0       	rjmp	.+80     	; 0x1f0e <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1ebe:	e9 e3       	ldi	r30, 0x39	; 57
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	88 2f       	mov	r24, r24
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	a9 01       	movw	r20, r18
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <KeyPad_getPressedKey+0x62>
    1ed2:	55 95       	asr	r21
    1ed4:	47 95       	ror	r20
    1ed6:	8a 95       	dec	r24
    1ed8:	e2 f7       	brpl	.-8      	; 0x1ed2 <KeyPad_getPressedKey+0x5e>
    1eda:	ca 01       	movw	r24, r20
    1edc:	81 70       	andi	r24, 0x01	; 1
    1ede:	90 70       	andi	r25, 0x00	; 0
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	91 f4       	brne	.+36     	; 0x1f08 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	88 2f       	mov	r24, r24
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	98 2f       	mov	r25, r24
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	89 0f       	add	r24, r25
    1ef8:	8f 5f       	subi	r24, 0xFF	; 255
    1efa:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	8f 5f       	subi	r24, 0xFF	; 255
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	84 30       	cpi	r24, 0x04	; 4
    1f12:	a8 f2       	brcs	.-86     	; 0x1ebe <KeyPad_getPressedKey+0x4a>
uint8 KeyPad_getPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	8f 5f       	subi	r24, 0xFF	; 255
    1f18:	8a 83       	std	Y+2, r24	; 0x02
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	84 30       	cpi	r24, 0x04	; 4
    1f1e:	08 f4       	brcc	.+2      	; 0x1f22 <KeyPad_getPressedKey+0xae>
    1f20:	b0 cf       	rjmp	.-160    	; 0x1e82 <KeyPad_getPressedKey+0xe>
    1f22:	ad cf       	rjmp	.-166    	; 0x1e7e <KeyPad_getPressedKey+0xa>

00001f24 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	00 d0       	rcall	.+0      	; 0x1f2a <KeyPad_4x4_adjustKeyNumber+0x6>
    1f2a:	00 d0       	rcall	.+0      	; 0x1f2c <KeyPad_4x4_adjustKeyNumber+0x8>
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	3c 83       	std	Y+4, r19	; 0x04
    1f3a:	2b 83       	std	Y+3, r18	; 0x03
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	88 30       	cpi	r24, 0x08	; 8
    1f42:	91 05       	cpc	r25, r1
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <KeyPad_4x4_adjustKeyNumber+0x24>
    1f46:	70 c0       	rjmp	.+224    	; 0x2028 <KeyPad_4x4_adjustKeyNumber+0x104>
    1f48:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4c:	29 30       	cpi	r18, 0x09	; 9
    1f4e:	31 05       	cpc	r19, r1
    1f50:	5c f5       	brge	.+86     	; 0x1fa8 <KeyPad_4x4_adjustKeyNumber+0x84>
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	9c 81       	ldd	r25, Y+4	; 0x04
    1f56:	84 30       	cpi	r24, 0x04	; 4
    1f58:	91 05       	cpc	r25, r1
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <KeyPad_4x4_adjustKeyNumber+0x3a>
    1f5c:	59 c0       	rjmp	.+178    	; 0x2010 <KeyPad_4x4_adjustKeyNumber+0xec>
    1f5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f60:	3c 81       	ldd	r19, Y+4	; 0x04
    1f62:	25 30       	cpi	r18, 0x05	; 5
    1f64:	31 05       	cpc	r19, r1
    1f66:	9c f4       	brge	.+38     	; 0x1f8e <KeyPad_4x4_adjustKeyNumber+0x6a>
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	82 30       	cpi	r24, 0x02	; 2
    1f6e:	91 05       	cpc	r25, r1
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <KeyPad_4x4_adjustKeyNumber+0x50>
    1f72:	48 c0       	rjmp	.+144    	; 0x2004 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1f74:	2b 81       	ldd	r18, Y+3	; 0x03
    1f76:	3c 81       	ldd	r19, Y+4	; 0x04
    1f78:	23 30       	cpi	r18, 0x03	; 3
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	0c f0       	brlt	.+2      	; 0x1f80 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1f7e:	45 c0       	rjmp	.+138    	; 0x200a <KeyPad_4x4_adjustKeyNumber+0xe6>
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	9c 81       	ldd	r25, Y+4	; 0x04
    1f84:	81 30       	cpi	r24, 0x01	; 1
    1f86:	91 05       	cpc	r25, r1
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <KeyPad_4x4_adjustKeyNumber+0x68>
    1f8a:	39 c0       	rjmp	.+114    	; 0x1ffe <KeyPad_4x4_adjustKeyNumber+0xda>
    1f8c:	67 c0       	rjmp	.+206    	; 0x205c <KeyPad_4x4_adjustKeyNumber+0x138>
    1f8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f90:	3c 81       	ldd	r19, Y+4	; 0x04
    1f92:	26 30       	cpi	r18, 0x06	; 6
    1f94:	31 05       	cpc	r19, r1
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <KeyPad_4x4_adjustKeyNumber+0x76>
    1f98:	41 c0       	rjmp	.+130    	; 0x201c <KeyPad_4x4_adjustKeyNumber+0xf8>
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9e:	87 30       	cpi	r24, 0x07	; 7
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	0c f0       	brlt	.+2      	; 0x1fa6 <KeyPad_4x4_adjustKeyNumber+0x82>
    1fa4:	3e c0       	rjmp	.+124    	; 0x2022 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1fa6:	37 c0       	rjmp	.+110    	; 0x2016 <KeyPad_4x4_adjustKeyNumber+0xf2>
    1fa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1faa:	3c 81       	ldd	r19, Y+4	; 0x04
    1fac:	2c 30       	cpi	r18, 0x0C	; 12
    1fae:	31 05       	cpc	r19, r1
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <KeyPad_4x4_adjustKeyNumber+0x90>
    1fb2:	46 c0       	rjmp	.+140    	; 0x2040 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	8d 30       	cpi	r24, 0x0D	; 13
    1fba:	91 05       	cpc	r25, r1
    1fbc:	5c f4       	brge	.+22     	; 0x1fd4 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1fbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc2:	2a 30       	cpi	r18, 0x0A	; 10
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	b1 f1       	breq	.+108    	; 0x2034 <KeyPad_4x4_adjustKeyNumber+0x110>
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	9c 81       	ldd	r25, Y+4	; 0x04
    1fcc:	8b 30       	cpi	r24, 0x0B	; 11
    1fce:	91 05       	cpc	r25, r1
    1fd0:	a4 f5       	brge	.+104    	; 0x203a <KeyPad_4x4_adjustKeyNumber+0x116>
    1fd2:	2d c0       	rjmp	.+90     	; 0x202e <KeyPad_4x4_adjustKeyNumber+0x10a>
    1fd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd8:	2e 30       	cpi	r18, 0x0E	; 14
    1fda:	31 05       	cpc	r19, r1
    1fdc:	b9 f1       	breq	.+110    	; 0x204c <KeyPad_4x4_adjustKeyNumber+0x128>
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	8e 30       	cpi	r24, 0x0E	; 14
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	7c f1       	brlt	.+94     	; 0x2046 <KeyPad_4x4_adjustKeyNumber+0x122>
    1fe8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fea:	3c 81       	ldd	r19, Y+4	; 0x04
    1fec:	2f 30       	cpi	r18, 0x0F	; 15
    1fee:	31 05       	cpc	r19, r1
    1ff0:	79 f1       	breq	.+94     	; 0x2050 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff6:	80 31       	cpi	r24, 0x10	; 16
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	69 f1       	breq	.+90     	; 0x2056 <KeyPad_4x4_adjustKeyNumber+0x132>
    1ffc:	2f c0       	rjmp	.+94     	; 0x205c <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1ffe:	97 e0       	ldi	r25, 0x07	; 7
    2000:	9a 83       	std	Y+2, r25	; 0x02
    2002:	2e c0       	rjmp	.+92     	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    2004:	28 e0       	ldi	r18, 0x08	; 8
    2006:	2a 83       	std	Y+2, r18	; 0x02
    2008:	2b c0       	rjmp	.+86     	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    200a:	39 e0       	ldi	r19, 0x09	; 9
    200c:	3a 83       	std	Y+2, r19	; 0x02
    200e:	28 c0       	rjmp	.+80     	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    2010:	85 e2       	ldi	r24, 0x25	; 37
    2012:	8a 83       	std	Y+2, r24	; 0x02
    2014:	25 c0       	rjmp	.+74     	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    2016:	94 e0       	ldi	r25, 0x04	; 4
    2018:	9a 83       	std	Y+2, r25	; 0x02
    201a:	22 c0       	rjmp	.+68     	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    201c:	25 e0       	ldi	r18, 0x05	; 5
    201e:	2a 83       	std	Y+2, r18	; 0x02
    2020:	1f c0       	rjmp	.+62     	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    2022:	36 e0       	ldi	r19, 0x06	; 6
    2024:	3a 83       	std	Y+2, r19	; 0x02
    2026:	1c c0       	rjmp	.+56     	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    2028:	8a e2       	ldi	r24, 0x2A	; 42
    202a:	8a 83       	std	Y+2, r24	; 0x02
    202c:	19 c0       	rjmp	.+50     	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    202e:	91 e0       	ldi	r25, 0x01	; 1
    2030:	9a 83       	std	Y+2, r25	; 0x02
    2032:	16 c0       	rjmp	.+44     	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    2034:	22 e0       	ldi	r18, 0x02	; 2
    2036:	2a 83       	std	Y+2, r18	; 0x02
    2038:	13 c0       	rjmp	.+38     	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    203a:	33 e0       	ldi	r19, 0x03	; 3
    203c:	3a 83       	std	Y+2, r19	; 0x02
    203e:	10 c0       	rjmp	.+32     	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    2040:	8d e2       	ldi	r24, 0x2D	; 45
    2042:	8a 83       	std	Y+2, r24	; 0x02
    2044:	0d c0       	rjmp	.+26     	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    2046:	9d e0       	ldi	r25, 0x0D	; 13
    2048:	9a 83       	std	Y+2, r25	; 0x02
    204a:	0a c0       	rjmp	.+20     	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    204c:	1a 82       	std	Y+2, r1	; 0x02
    204e:	08 c0       	rjmp	.+16     	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    2050:	2d e3       	ldi	r18, 0x3D	; 61
    2052:	2a 83       	std	Y+2, r18	; 0x02
    2054:	05 c0       	rjmp	.+10     	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    2056:	3b e2       	ldi	r19, 0x2B	; 43
    2058:	3a 83       	std	Y+2, r19	; 0x02
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	8a 83       	std	Y+2, r24	; 0x02
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <__udivmodsi4>:
    2070:	a1 e2       	ldi	r26, 0x21	; 33
    2072:	1a 2e       	mov	r1, r26
    2074:	aa 1b       	sub	r26, r26
    2076:	bb 1b       	sub	r27, r27
    2078:	fd 01       	movw	r30, r26
    207a:	0d c0       	rjmp	.+26     	; 0x2096 <__udivmodsi4_ep>

0000207c <__udivmodsi4_loop>:
    207c:	aa 1f       	adc	r26, r26
    207e:	bb 1f       	adc	r27, r27
    2080:	ee 1f       	adc	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	a2 17       	cp	r26, r18
    2086:	b3 07       	cpc	r27, r19
    2088:	e4 07       	cpc	r30, r20
    208a:	f5 07       	cpc	r31, r21
    208c:	20 f0       	brcs	.+8      	; 0x2096 <__udivmodsi4_ep>
    208e:	a2 1b       	sub	r26, r18
    2090:	b3 0b       	sbc	r27, r19
    2092:	e4 0b       	sbc	r30, r20
    2094:	f5 0b       	sbc	r31, r21

00002096 <__udivmodsi4_ep>:
    2096:	66 1f       	adc	r22, r22
    2098:	77 1f       	adc	r23, r23
    209a:	88 1f       	adc	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	1a 94       	dec	r1
    20a0:	69 f7       	brne	.-38     	; 0x207c <__udivmodsi4_loop>
    20a2:	60 95       	com	r22
    20a4:	70 95       	com	r23
    20a6:	80 95       	com	r24
    20a8:	90 95       	com	r25
    20aa:	9b 01       	movw	r18, r22
    20ac:	ac 01       	movw	r20, r24
    20ae:	bd 01       	movw	r22, r26
    20b0:	cf 01       	movw	r24, r30
    20b2:	08 95       	ret

000020b4 <__prologue_saves__>:
    20b4:	2f 92       	push	r2
    20b6:	3f 92       	push	r3
    20b8:	4f 92       	push	r4
    20ba:	5f 92       	push	r5
    20bc:	6f 92       	push	r6
    20be:	7f 92       	push	r7
    20c0:	8f 92       	push	r8
    20c2:	9f 92       	push	r9
    20c4:	af 92       	push	r10
    20c6:	bf 92       	push	r11
    20c8:	cf 92       	push	r12
    20ca:	df 92       	push	r13
    20cc:	ef 92       	push	r14
    20ce:	ff 92       	push	r15
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	ca 1b       	sub	r28, r26
    20de:	db 0b       	sbc	r29, r27
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	09 94       	ijmp

000020ec <__epilogue_restores__>:
    20ec:	2a 88       	ldd	r2, Y+18	; 0x12
    20ee:	39 88       	ldd	r3, Y+17	; 0x11
    20f0:	48 88       	ldd	r4, Y+16	; 0x10
    20f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    20f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    20f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    20f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    20fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    20fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    20fe:	b9 84       	ldd	r11, Y+9	; 0x09
    2100:	c8 84       	ldd	r12, Y+8	; 0x08
    2102:	df 80       	ldd	r13, Y+7	; 0x07
    2104:	ee 80       	ldd	r14, Y+6	; 0x06
    2106:	fd 80       	ldd	r15, Y+5	; 0x05
    2108:	0c 81       	ldd	r16, Y+4	; 0x04
    210a:	1b 81       	ldd	r17, Y+3	; 0x03
    210c:	aa 81       	ldd	r26, Y+2	; 0x02
    210e:	b9 81       	ldd	r27, Y+1	; 0x01
    2110:	ce 0f       	add	r28, r30
    2112:	d1 1d       	adc	r29, r1
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	ed 01       	movw	r28, r26
    2120:	08 95       	ret

00002122 <_exit>:
    2122:	f8 94       	cli

00002124 <__stop_program>:
    2124:	ff cf       	rjmp	.-2      	; 0x2124 <__stop_program>
